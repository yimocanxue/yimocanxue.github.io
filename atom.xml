<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金州苍狼</title>
  <icon>https://www.gravatar.com/avatar/d8f208b2712e7fbf0b31acd278cde30b</icon>
  <subtitle>向往浪迹天涯的技术宅</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xuh.io/"/>
  <updated>2019-02-11T14:38:16.937Z</updated>
  <id>https://xuh.io/</id>
  
  <author>
    <name>David.xu</name>
    <email>xuh86@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构之（四）--- 队列</title>
    <link href="https://xuh.io/20190211/5141ea00.html"/>
    <id>https://xuh.io/20190211/5141ea00.html</id>
    <published>2019-02-11T14:27:28.000Z</published>
    <updated>2019-02-11T14:38:16.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="队列ADT"><a href="#队列ADT" class="headerlink" title="队列ADT"></a>队列ADT</h3><p>队列(queue)和栈一样，也是一种表，和栈的主要区别在于插入和删除元素的方式，队列是先进先出(FIFO)，从队尾(rear)插入元素，称为入队(enqueue)，从队头(front)删除并返回元素，称为出队(dequeue)。</p><p>同栈一样，通常也由链表或数组实现队列，所有操作时间复杂度都为O(1)。</p><h3 id="队列数组实现"><a href="#队列数组实现" class="headerlink" title="队列数组实现"></a>队列数组实现</h3><p>ADT规范头文件queue.h：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _queue_h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span> *<span class="title">Queue</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义队列元素类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个空队列</span></span><br><span class="line"><span class="comment"> * @param  maxElements 队列最大容量</span></span><br><span class="line"><span class="comment"> * @return             </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Queue <span class="title">createQueue</span> <span class="params">(<span class="keyword">int</span> maxElements)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断队列是否为空</span></span><br><span class="line"><span class="comment"> * @param  q </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span> <span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断队列是否已满</span></span><br><span class="line"><span class="comment"> * @param  q </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span> <span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放一个队列</span></span><br><span class="line"><span class="comment"> * @param q </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disposeQueue</span> <span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空队列</span></span><br><span class="line"><span class="comment"> * @param q </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队</span></span><br><span class="line"><span class="comment"> * @param x </span></span><br><span class="line"><span class="comment"> * @param q </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span> <span class="params">(VType x, Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队</span></span><br><span class="line"><span class="comment"> * @param  q </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">dequeue</span> <span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回队头元素</span></span><br><span class="line"><span class="comment"> * @param  q </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">front</span> <span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示队列元素</span></span><br><span class="line"><span class="comment"> * @param q </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(Queue q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _queue_h */</span></span></span><br></pre></td></tr></table></figure><p>实现文件queue.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"queue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MinQueueSize (5) <span class="comment">// 定义队列最小容量</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> capacity; <span class="comment">// 队列容量</span></span><br><span class="line"><span class="keyword">int</span> front; <span class="comment">// 队头位置</span></span><br><span class="line"><span class="keyword">int</span> rear; <span class="comment">// 队尾位置</span></span><br><span class="line"><span class="keyword">int</span> size; <span class="comment">// 当前队列大小</span></span><br><span class="line">VType *<span class="built_in">array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示unix风格的错误</span></span><br><span class="line"><span class="comment"> * @param msg </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unix_error</span> <span class="params">(<span class="keyword">char</span> *msg)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, msg);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Malloc</span> <span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"><span class="keyword">if</span> ((p = <span class="built_in">malloc</span>(size)) == <span class="literal">NULL</span>)</span><br><span class="line">unix_error(<span class="string">"malloc error!"</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个空队列</span></span><br><span class="line"><span class="comment"> * @param  maxElements 队列最大容量</span></span><br><span class="line"><span class="comment"> * @return             </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Queue <span class="title">createQueue</span> <span class="params">(<span class="keyword">int</span> maxElements)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (maxElements &lt; MinQueueSize)</span><br><span class="line">unix_error(<span class="string">"queue size is small"</span>);</span><br><span class="line"></span><br><span class="line">q = Malloc(<span class="keyword">sizeof</span> (struct QueueRecord));</span><br><span class="line"></span><br><span class="line">q-&gt;capacity = maxElements;</span><br><span class="line">q-&gt;<span class="built_in">array</span> = Malloc(<span class="keyword">sizeof</span> (VType) * maxElements);</span><br><span class="line"><span class="comment">// 清空队列</span></span><br><span class="line">deleteAll(q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断队列是否为空</span></span><br><span class="line"><span class="comment"> * @param  q </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span> <span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q-&gt;size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断队列是否已满</span></span><br><span class="line"><span class="comment"> * @param  q </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span> <span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> q-&gt;size == q-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放一个队列</span></span><br><span class="line"><span class="comment"> * @param q </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disposeQueue</span> <span class="params">(Queue q)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">free</span>(q-&gt;<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空队列</span></span><br><span class="line"><span class="comment"> * @param q </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q-&gt;size = <span class="number">0</span>;</span><br><span class="line">q-&gt;front = <span class="number">1</span>;</span><br><span class="line">q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入队</span></span><br><span class="line"><span class="comment"> * @param x </span></span><br><span class="line"><span class="comment"> * @param q </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span> <span class="params">(VType x, Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isFull(q))</span><br><span class="line">unix_error(<span class="string">"enqueue error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (++q-&gt;size &gt; q-&gt;capacity)</span><br><span class="line">unix_error(<span class="string">"queue is overflow"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> newRear = ++(q-&gt;rear) &lt; q-&gt;capacity ? q-&gt;rear : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;rear = newRear;</span><br><span class="line">q-&gt;<span class="built_in">array</span>[newRear] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出队</span></span><br><span class="line"><span class="comment"> * @param  q </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">dequeue</span> <span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(q))</span><br><span class="line">unix_error(<span class="string">"dequeue error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> newFront;</span><br><span class="line">VType result;</span><br><span class="line"></span><br><span class="line">result = q-&gt;<span class="built_in">array</span>[q-&gt;front];</span><br><span class="line"><span class="comment">// 新队头</span></span><br><span class="line">newFront = ++(q-&gt;front) &lt; q-&gt;capacity ? q-&gt;front : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;front = newFront;</span><br><span class="line">q-&gt;size--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回队头元素</span></span><br><span class="line"><span class="comment"> * @param  q </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">front</span> <span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(q))</span><br><span class="line">unix_error(<span class="string">"front error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> q-&gt;<span class="built_in">array</span>[q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示队列元素</span></span><br><span class="line"><span class="comment"> * @param q </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(Queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"front is %d, rear is %d, size is %d\n"</span>, q-&gt;front, q-&gt;rear, q-&gt;size);</span><br><span class="line"><span class="keyword">if</span> (isEmpty(q)) </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, maxIndex = q-&gt;capacity - <span class="number">1</span>; i &lt; q-&gt;size; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp = i + q-&gt;front;</span><br><span class="line">tmp = tmp &lt; maxIndex ?  tmp : tmp - q-&gt;capacity; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"队列第%d个元素%d\n"</span>, i + <span class="number">1</span>, q-&gt;<span class="built_in">array</span>[tmp]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;队列ADT&quot;&gt;&lt;a href=&quot;#队列ADT&quot; class=&quot;headerlink&quot; title=&quot;队列ADT&quot;&gt;&lt;/a&gt;队列ADT&lt;/h3&gt;&lt;p&gt;队列(queue)和栈一样，也是一种表，和栈的主要区别在于插入和删除元素的方式，队列是先进先出(FIFO)，从队尾(
      
    
    </summary>
    
      <category term="算法/数据结构" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="理论" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="队列" scheme="https://xuh.io/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="queue" scheme="https://xuh.io/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之（三）--- 栈实现</title>
    <link href="https://xuh.io/20190211/b2596ee6.html"/>
    <id>https://xuh.io/20190211/b2596ee6.html</id>
    <published>2019-02-11T11:25:40.000Z</published>
    <updated>2019-02-11T14:25:38.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栈ADT概述"><a href="#栈ADT概述" class="headerlink" title="栈ADT概述"></a>栈ADT概述</h3><p>栈(stack)其实是一种特殊的表，插入后删除都只能从表的指定位置进行，这个位置成为栈顶。栈的插入叫入栈(push)，删除叫出栈(pop)，因为入栈和出栈都是在栈顶进行，因此最后入栈的元素最先出栈(后进先出:LIFO)，因此栈也叫LIFO表，换句话说，在任意时刻，只有栈顶元素是可见的。</p><p>因为栈其实是一个表，因此任何实现表的方法都能实现栈，通常有链表和数组两种实现方式，下面分别实现。</p><h3 id="栈链表实现"><a href="#栈链表实现" class="headerlink" title="栈链表实现"></a>栈链表实现</h3><p>首先是栈链表实现的ADT声明头文件stack.h:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _stack_h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VType;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">ptrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> ptrToNode Stack;</span><br><span class="line"><span class="keyword">typedef</span> ptrToNode Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个空栈</span></span><br><span class="line"><span class="comment"> * @return  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Stack <span class="title">createStack</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测是否空栈</span></span><br><span class="line"><span class="comment"> * @param  s</span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈大小</span></span><br><span class="line"><span class="comment"> * @param  s</span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空栈</span></span><br><span class="line"><span class="comment"> * @param s</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈</span></span><br><span class="line"><span class="comment"> * @param Stack </span></span><br><span class="line"><span class="comment"> * @param x     </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span> <span class="params">(Stack, VType x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> * @param  stack </span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">pop</span> <span class="params">(Stack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回栈顶元素</span></span><br><span class="line"><span class="comment"> * @param  s</span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">top</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 展示栈数据</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(Stack <span class="built_in">stack</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _stack_h */</span></span></span><br></pre></td></tr></table></figure><p>然后是显现文件stack.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> &#123;</span></span><br><span class="line">VType value;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示unix风格的错误</span></span><br><span class="line"><span class="comment"> * @param msg </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unix_error</span> <span class="params">(<span class="keyword">char</span> *msg)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, msg);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Malloc</span> <span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"><span class="keyword">if</span> ((p = <span class="built_in">malloc</span>(size)) == <span class="literal">NULL</span>)</span><br><span class="line">unix_error(<span class="string">"malloc error!"</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个空栈</span></span><br><span class="line"><span class="comment"> * @return  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Stack <span class="title">createStack</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack s = (Stack)Malloc(<span class="keyword">sizeof</span> (struct StackNode));</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测是否空栈</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span> <span class="params">(Stack s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈大小</span></span><br><span class="line"><span class="comment"> * @param  s</span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">Node p = s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空栈</span></span><br><span class="line"><span class="comment"> * @param s </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node tmp, node = s-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">tmp = node-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line">node = tmp;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈</span></span><br><span class="line"><span class="comment"> * @param s </span></span><br><span class="line"><span class="comment"> * @param x     </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span> <span class="params">(Stack s, VType x)</span> </span>&#123;</span><br><span class="line">Node node;</span><br><span class="line"></span><br><span class="line">node = (Node)Malloc(<span class="keyword">sizeof</span>(struct StackNode));</span><br><span class="line">node-&gt;value = x;</span><br><span class="line">node-&gt;next = s-&gt;next;</span><br><span class="line">s-&gt;next = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">pop</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty (s))</span><br><span class="line">unix_error(<span class="string">"pop error"</span>);</span><br><span class="line"></span><br><span class="line">VType result;</span><br><span class="line"></span><br><span class="line">Node node = s-&gt;next;</span><br><span class="line">s-&gt;next = node-&gt;next;</span><br><span class="line">result = node-&gt;value;</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回栈顶元素</span></span><br><span class="line"><span class="comment"> * @param  s</span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">top</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(s))</span><br><span class="line">unix_error(<span class="string">"empty stack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s-&gt;next-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 展示栈数据</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(s)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"当前是空栈\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">Node n = s-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"从栈顶第%d个元素：%d\n"</span>, count++, n-&gt;value);</span><br><span class="line">n = n-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈数组实现"><a href="#栈数组实现" class="headerlink" title="栈数组实现"></a>栈数组实现</h3><p>栈数组实现和链表实现的区别在于需要提前设置栈的大小，一遍初始化数组，但是它相比于链表实现的优势在于入栈和出栈少了频繁的malloc和free开销。</p><p>因为需要提前设置栈大小，因此创建栈实例时需要给出栈容量参数，下面是栈的数组直线的ADT头文件stack2.h:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _stack_h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span> *<span class="title">Stack</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> VType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建并初始化一个空栈</span></span><br><span class="line"><span class="comment"> * @param  maxElements 栈最大容量</span></span><br><span class="line"><span class="comment"> * @return             </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Stack <span class="title">createStack</span> <span class="params">(<span class="keyword">int</span> maxElements)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈大小</span></span><br><span class="line"><span class="comment"> * @param  s</span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测当期栈是否为空</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测当前栈是否满栈</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空栈</span></span><br><span class="line"><span class="comment"> * @param s [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放栈</span></span><br><span class="line"><span class="comment"> * @param s </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disposeStack</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈</span></span><br><span class="line"><span class="comment"> * @param x 入栈元素</span></span><br><span class="line"><span class="comment"> * @param s </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span> <span class="params">(VType x, Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">pop</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回栈顶元素</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Vtype <span class="title">top</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 展示栈数据</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(Stack s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _stack_h */</span></span></span><br></pre></td></tr></table></figure><p>实现文件stack2.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stack2.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EmptyTOS (-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MinStackSize (5)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> capacity; <span class="comment">// 栈最大容量</span></span><br><span class="line"><span class="keyword">int</span> topOfStack; <span class="comment">// 栈顶下标</span></span><br><span class="line">VType *<span class="built_in">array</span>; <span class="comment">// 存储栈元素的数组</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示unix风格的错误</span></span><br><span class="line"><span class="comment"> * @param msg </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unix_error</span> <span class="params">(<span class="keyword">char</span> *msg)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, msg);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Malloc</span> <span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"><span class="keyword">if</span> ((p = <span class="built_in">malloc</span>(size)) == <span class="literal">NULL</span>)</span><br><span class="line">unix_error(<span class="string">"malloc error!"</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建并初始化一个空栈</span></span><br><span class="line"><span class="comment"> * @param  maxElements 栈最大容量</span></span><br><span class="line"><span class="comment"> * @return             </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Stack <span class="title">createStack</span> <span class="params">(<span class="keyword">int</span> maxElements)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stack s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (maxElements &lt; MinStackSize)</span><br><span class="line">unix_error(<span class="string">"Stack size is too small"</span>);</span><br><span class="line"></span><br><span class="line">s = Malloc(<span class="keyword">sizeof</span> (struct StackRecord));</span><br><span class="line"></span><br><span class="line">s-&gt;<span class="built_in">array</span> = Malloc(<span class="keyword">sizeof</span> (VType) * maxElements);</span><br><span class="line"></span><br><span class="line">s-&gt;capacity = maxElements</span><br><span class="line">deleteAll(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈大小</span></span><br><span class="line"><span class="comment"> * @param  s</span></span><br><span class="line"><span class="comment"> * @return       </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s-&gt;topOfStack + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测当期栈是否为空</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s-&gt;topOfStack == EmptyTOS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测当前栈是否满栈</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isFull</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> size(s) == s-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空栈</span></span><br><span class="line"><span class="comment"> * @param s [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(Stack s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s-&gt;topOfStack = EmptyTOS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放栈</span></span><br><span class="line"><span class="comment"> * @param s </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disposeStack</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">free</span> (s-&gt;<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈</span></span><br><span class="line"><span class="comment"> * @param x 入栈元素</span></span><br><span class="line"><span class="comment"> * @param s </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span> <span class="params">(VType x, Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isFull(s))</span><br><span class="line">unix_error(<span class="string">"Full stack"</span>);</span><br><span class="line"></span><br><span class="line">s-&gt;<span class="built_in">array</span>[++(s-&gt;topOfStack)] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">pop</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(s))</span><br><span class="line">unix_error(<span class="string">"Empty stack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s-&gt;<span class="built_in">array</span>[s-&gt;topOfStack--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回栈顶元素</span></span><br><span class="line"><span class="comment"> * @param  s </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">VType <span class="title">pop</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(s))</span><br><span class="line">unix_error(<span class="string">"Empty stack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s-&gt;<span class="built_in">array</span>[s-&gt;topOfStack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 展示栈数据</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(Stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(s)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"当前是空栈\n"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = s-&gt;topOfStack; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"从栈顶第%d个元素：%d\n"</span>, (s-&gt;topOfStack - i), s-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;栈ADT概述&quot;&gt;&lt;a href=&quot;#栈ADT概述&quot; class=&quot;headerlink&quot; title=&quot;栈ADT概述&quot;&gt;&lt;/a&gt;栈ADT概述&lt;/h3&gt;&lt;p&gt;栈(stack)其实是一种特殊的表，插入后删除都只能从表的指定位置进行，这个位置成为栈顶。栈的插入叫入栈(p
      
    
    </summary>
    
      <category term="算法/数据结构" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="理论" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="栈" scheme="https://xuh.io/tags/%E6%A0%88/"/>
    
      <category term="stack" scheme="https://xuh.io/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之（一）--- 线性表</title>
    <link href="https://xuh.io/20190201/aaf1bacf.html"/>
    <id>https://xuh.io/20190201/aaf1bacf.html</id>
    <published>2019-01-31T17:06:21.000Z</published>
    <updated>2019-01-31T17:08:20.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="抽象数据类型-ADT"><a href="#抽象数据类型-ADT" class="headerlink" title="抽象数据类型(ADT)"></a>抽象数据类型(ADT)</h3><p>抽象数据类型ADT(abstract data type)，一个实现包括存储数据元素的存储结构以及基本操作的算法集合，它是数学的抽象，在ADT的定义中，不包括具体的实现细节。</p><h3 id="表ADT"><a href="#表ADT" class="headerlink" title="表ADT"></a>表ADT</h3><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>一组数据类型相同的有限序列{$A_1, A_2, A_3 ,…, A_n$}，表的大小为n，当表大小为0时成为空表。除第一个元素外，每个元素有且仅有一个前驱，除最后一个元素外，每个元素有且仅有一个后继。</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>根据元素的存储方式可分为顺序表和链表两大类：</p><pre class="mermaid">graph LR      B["线性表"]      B-->C[线性存储]      C-->D[顺序表]      B-->E["链式存储"]      E-->F["单链表"]      E-->G["双链表"]      E-->H["循环链表"]      E-->I["静态链表(借助数组实现)"]</pre><h5 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h5><p>逻辑上相邻的两个元素，其物理存储也相邻，一般通过数组实现。</p><ul><li>优点<ul><li>实现简单</li><li>查找性能高，时间复杂度为O(1)</li></ul></li><li>缺点<ul><li>插入、删除需要移动元素，时间复杂度为O(N)</li><li>需要预分配存储空间，容易造成资源浪费和发生溢出错误</li></ul></li><li>适用场景<ul><li>表大小确定</li><li>查找操作频繁，插入、删除操作少</li></ul></li></ul><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><p>为了避免插入、删除的线性开销，就要避免插入、删除时的部分或整体移动，因此表元素之间不能连续存储，这种表就是链表，链表分单链表、双链表、循环链表等，下面先说说比较简单和常用的单链表。</p><p>在C语言的实现中，通过一个结构体来描述一个元素(节点)，包括一个数据域成员和一个指针成员，指针指向元素的后继 。该指针成员称Next指针或“链”，最后一个元素的Next指针指向NULL。</p><p><img src="http://xuh.cn-etc.com/2019/02/01/1548952375826.png!md" alt="一个含有五个元素的表"></p><center>一个含有五个元素的单链表</center><p>指向第一个节点A1的指针叫头指针，我们通过头指针来命名链表。</p><p>因为元素不是连续存储的，元素之间的逻辑关联通过Next指针引用，因此插入元素时不需要把插入点后的元素整个后移，只需要修改插入点的指针引用关系即可：</p><p><img src="http://xuh.cn-etc.com/2019/02/01/1548952810195.png!md" alt=""></p><p>上图中，在A2后插入元素X，只需要修改A2的Next指针指向新的节点，然后新的节点指向原A2的后继即可。</p><p>同样，对于删除操作，只需要将删除节点的前驱Next指针指向删除节点的后继即可：</p><p><img src="http://xuh.cn-etc.com/2019/02/01/1548952940471.png!md" alt=""></p><p>如果要删除的是最后一个节点，只需要将前驱Next指针指向NULL即可，但是，这里有一个问题，就是当要删除的节点是第一个节点A1的时候会怎样？头指针的引用将会丢失，也就是表丢失了，同样如果在A1前插入元素也会造成表的丢失。</p><p>为了解决首节点删除和前插问题，一般实现中引入一个额外的节点，称为头节点或哑节点，它不包含数据域。头结点在位置0处，下面是一个带头结点的表：</p><p><img src="http://xuh.cn-etc.com/2019/02/01/1548953800029.png!md" alt=""></p><p>引入头结点后，对A1节点的删除和前插操作和其它节点统一了，下面的实现采用头结点方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;抽象数据类型-ADT&quot;&gt;&lt;a href=&quot;#抽象数据类型-ADT&quot; class=&quot;headerlink&quot; title=&quot;抽象数据类型(ADT)&quot;&gt;&lt;/a&gt;抽象数据类型(ADT)&lt;/h3&gt;&lt;p&gt;抽象数据类型ADT(abstract data type)，一个实现包括
      
    
    </summary>
    
      <category term="算法/数据结构" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="理论" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="ADT" scheme="https://xuh.io/tags/ADT/"/>
    
      <category term="线性表" scheme="https://xuh.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之（二）--- 单链表实现</title>
    <link href="https://xuh.io/20190201/5faa822b.html"/>
    <id>https://xuh.io/20190201/5faa822b.html</id>
    <published>2019-01-31T17:04:59.000Z</published>
    <updated>2019-02-01T02:52:16.573Z</updated>
    
    <content type="html"><![CDATA[<p>带头结点单链表ADT定义在头文件里(linkedList.h):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LINKED_LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表ADT</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  包含头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义列表节点类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表的节点结构体</span></span><br><span class="line"><span class="comment"> * 具体成员定义放在实现文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指向节点的指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">ptrToNode</span>;</span></span><br><span class="line"><span class="comment">// 定义节点指针的别名</span></span><br><span class="line"><span class="keyword">typedef</span> ptrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> ptrToNode Node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个孤儿节点</span></span><br><span class="line"><span class="comment"> * @param  x </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node <span class="title">createNode</span> <span class="params">(T x)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化一个含头结点的空表</span></span><br><span class="line"><span class="comment"> * @return  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List <span class="title">createList</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取表大小</span></span><br><span class="line"><span class="comment"> * @param  list </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span> <span class="params">(List <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测表是否是空表</span></span><br><span class="line"><span class="comment"> * @param  list </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span> <span class="params">(List <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找x所在的第一个节点，不存在是返回NULL</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param  list 查找列表</span></span><br><span class="line"><span class="comment"> * @param  x    节点数值</span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node <span class="title">find</span> <span class="params">(List <span class="built_in">list</span>, T x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找第一个包含x的节点的前驱</span></span><br><span class="line"><span class="comment"> * @param  list </span></span><br><span class="line"><span class="comment"> * @param  x    </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node <span class="title">findPrevious</span> <span class="params">(List <span class="built_in">list</span>, T x)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找最后的节点</span></span><br><span class="line"><span class="comment"> * @param  list </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node <span class="title">findLast</span> <span class="params">(List <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在所给节点前插入元素</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> * @param n    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertBefore</span> <span class="params">(List <span class="built_in">list</span>, Node n, T x)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在所给节点后插入元素</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> * @param n    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span> <span class="params">(List <span class="built_in">list</span>, Node n, T x)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在表尾附加元素</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> * @param x    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(List <span class="built_in">list</span>, T x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除第一个包含x的节点</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> * @param x    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span> <span class="params">(List <span class="built_in">list</span>, T x)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空表</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(List <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 翻转表</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span> <span class="params">(List <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 展示列表数据</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(List <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示unix风格的错误</span></span><br><span class="line"><span class="comment"> * @param msg </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unix_error</span> <span class="params">(<span class="keyword">char</span> *msg)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __LINKED_LIST_H */</span></span></span><br></pre></td></tr></table></figure><p>实现文件(linkedList.c):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linkedList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">T value;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示unix风格的错误</span></span><br><span class="line"><span class="comment"> * @param msg </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unix_error</span> <span class="params">(<span class="keyword">char</span> *msg)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, msg);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Malloc</span> <span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"><span class="keyword">if</span> ((p = <span class="built_in">malloc</span>(size)) == <span class="literal">NULL</span>)</span><br><span class="line">unix_error(<span class="string">"malloc error!"</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个孤儿节点</span></span><br><span class="line"><span class="comment"> * @param  x </span></span><br><span class="line"><span class="comment"> * @return   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node <span class="title">createNode</span> <span class="params">(T x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node node = (Node)Malloc(<span class="keyword">sizeof</span> (struct ListNode));</span><br><span class="line">node-&gt;value = x; </span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化一个含头结点的空表</span></span><br><span class="line"><span class="comment"> * @return  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List <span class="title">createList</span> <span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (List)createNode(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取表大小</span></span><br><span class="line"><span class="comment"> * @param  list </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span> <span class="params">(List <span class="built_in">list</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">Node tmp = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (tmp-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">tmp = tmp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测表是否是空表</span></span><br><span class="line"><span class="comment"> * @param  list </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span> <span class="params">(List <span class="built_in">list</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找x所在的第一个节点，不存在是返回NULL</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param  list 查找列表</span></span><br><span class="line"><span class="comment"> * @param  x    节点数值</span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node <span class="title">find</span> <span class="params">(List <span class="built_in">list</span>, T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span> &amp;&amp; p-&gt;value != x)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找第一个包含x的节点的前驱</span></span><br><span class="line"><span class="comment"> * @param  list </span></span><br><span class="line"><span class="comment"> * @param  x    </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node <span class="title">findPrevious</span> <span class="params">(List <span class="built_in">list</span>, T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node p = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span> &amp;&amp; p-&gt;next-&gt;value != x)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找最后的节点</span></span><br><span class="line"><span class="comment"> * @param  list </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Node <span class="title">findLast</span> <span class="params">(List <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node p = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在所给节点前插入元素</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> * @param n    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertBefore</span> <span class="params">(List <span class="built_in">list</span>, Node n, T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node prev = findPrevious(<span class="built_in">list</span>, n-&gt;value);</span><br><span class="line"></span><br><span class="line">Node new_node = createNode(x);</span><br><span class="line">new_node-&gt;next = n;</span><br><span class="line">prev-&gt;next = new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在所给节点后插入元素</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> * @param n    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span> <span class="params">(List <span class="built_in">list</span>, Node n, T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node new_node = createNode(x);</span><br><span class="line">new_node-&gt;next = n-&gt;next;</span><br><span class="line">n-&gt;next = new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在表尾附加元素</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> * @param x    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(List <span class="built_in">list</span>, T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node last_node = findLast(<span class="built_in">list</span>);</span><br><span class="line">Node new_node = createNode(x);</span><br><span class="line">last_node-&gt;next = new_node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除第一个包含x的节点</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> * @param x    </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span> <span class="params">(List <span class="built_in">list</span>, T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node tmp;</span><br><span class="line">Node prev = findPrevious(<span class="built_in">list</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prev != <span class="literal">NULL</span> &amp;&amp; prev-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">tmp = prev-&gt;next;</span><br><span class="line">prev-&gt;next = prev-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空表</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span> <span class="params">(List <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node tmp;</span><br><span class="line">Node p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">tmp = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 翻转表</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span> <span class="params">(List <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Node prev = <span class="literal">NULL</span>;</span><br><span class="line">Node cur = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">Node tmp = cur-&gt;next;</span><br><span class="line"><span class="comment">// 当前节点是尾节点</span></span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">list</span>-&gt;next = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;next = prev;</span><br><span class="line">prev = cur;</span><br><span class="line">cur = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 展示列表数据</span></span><br><span class="line"><span class="comment"> * @param list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(List <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"当前列表为空\n"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"头结点"</span>);</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" -&gt; %d "</span>, p-&gt;value);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;带头结点单链表ADT定义在头文件里(linkedList.h):&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="算法/数据结构" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="理论" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="单链表" scheme="https://xuh.io/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>结构和联合</title>
    <link href="https://xuh.io/20190129/667c01ef.html"/>
    <id>https://xuh.io/20190129/667c01ef.html</id>
    <published>2019-01-29T10:55:23.000Z</published>
    <updated>2019-01-29T14:31:51.751Z</updated>
    
    <content type="html"><![CDATA[<p>C语言中有两种聚合数据类型，数组和结构，数组是相同元素的集合，而结构可以存储不同类型的元素，这些元素称为结构的成员(member)，每个成员都有自己的名字和类型。</p><p>另外，结构变量是一种标量，这和数组有很大的区别，在绝大多数表达式中，数组名的值为指向数组第一个元素的指针(例外: sizeof 数组名返回整个数组占用字节大小，&amp;array返回指向整个数组的指针，而不是指向第一个元素的指针的指针)。</p><h3 id="结构声明"><a href="#结构声明" class="headerlink" title="结构声明"></a>结构声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> &#123;</span>member-<span class="built_in">list</span>&#125; variable-<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><p>tag、member-list、variable-list都是可选的，但是除了tag，其它可选部分至少出现2个。</p><p>下面是几种常见的基本声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合法，不完整声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="comment">// 合法</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 合法</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125; x;</span><br><span class="line"><span class="comment">// 合法</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125; y,*z;</span><br><span class="line"><span class="comment">// 非法</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">self_ref</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">self_ref</span> <span class="title">b</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 合法</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">self_ref2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">self_ref2</span> <span class="title">b</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>不完整声明</p><ul><li>声明语句只有tag</li><li>一般用在结构体相互引用(依赖)的的情形。</li></ul></li><li><p>声明Point结构时并不分配内存</p><p>这是因为这里只是声明一种类型，而没有声明变量，因此不占用内存。</p></li><li><p>结构变量x、y是两种完全不同的类型</p><p>尽管他们成员列表相同，但是他们是两种不同的结构类型，因此<code>z=&amp;x</code>是非法的。</p></li><li><p>当结构自引用时，必须用指针</p><p>self_ref的声明是非法的，因为成员b构成无线循环引用，而self_ref2是合法的，因为self_ref2中b是指针，编译器在结构本身长度确定之前就可以确定指针的长度。</p></li><li><p>最后，声明语句最后一定要有;结尾，尤其是没有声明变量时，结尾的花括号很容易误以为是语句块而少了分号。</p></li></ul><p>如果上面的x、和y、z要共享相同的成员列表声明变成同一种类型，可以把标签tag和成员列表一起声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">x</span>;</span> <span class="comment">// struct关键词不能省略</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">y</span>, *<span class="title">z</span>;</span></span><br><span class="line"></span><br><span class="line">z = &amp;x;</span><br></pre></td></tr></table></figure><p>这个时候x和y类型就相同了，但是这个声明也有一个问题，太啰嗦了，在定义变量时，模式<code>struct Point 变量名</code>中struct关键词不能省略，这问题可以通过<code>typedef</code>关键词解决。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span>  <span class="comment">// 标签Point可省略</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125; myPoint;</span><br><span class="line"></span><br><span class="line">myPoint x;</span><br><span class="line">myPoint y, *z;</span><br><span class="line"></span><br><span class="line">z = &amp;x;</span><br></pre></td></tr></table></figure><p>现在相当于给类型<code>struct Point</code>定义了一个别名<code>myPoint</code>。</p><p>最后，关于自引用结构的定义，注意下面的错误：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    self_ref3 *b;</span><br><span class="line">&#125; self_ref3;</span><br></pre></td></tr></table></figure><p>这个声明的问题在于类型名self_ref3在末尾才完成定义，因此成员列表的声明部分就没办法使用它，可以改成下面的格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">self_ref3_tag</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">self_ref3_tag</span> *<span class="title">b</span>;</span></span><br><span class="line">&#125; self_ref3;</span><br></pre></td></tr></table></figure><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>结构体初始化和数组初始化类似，一对花括号包含的以逗号分隔的值序列，根据成员定义顺序一一赋值，如果值少于成员，则剩余成员以缺省值初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">INT_EX</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b[<span class="number">5</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">char</span> b;</span><br><span class="line">    &#125; c;</span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>,<span class="string">'x'</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="成员访问"><a href="#成员访问" class="headerlink" title="成员访问"></a>成员访问</h3><ul><li>结构体变量通过.操作符访问</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">20</span>];</span><br><span class="line">&#125; x = &#123;</span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    <span class="string">"hello world!"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x.a); <span class="comment">// 输出10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, x.b); <span class="comment">// 输出hello world!</span></span><br></pre></td></tr></table></figure><ul><li>结构体指针通过-&gt;访问(指针间接访问)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">20</span>];</span><br><span class="line">&#125; x = &#123; <span class="number">10</span>, <span class="string">"hello world!"</span> &#125;, *y;</span><br><span class="line">y = &amp;x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, y-&gt;a); <span class="comment">// 输出10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, y-&gt;b); <span class="comment">// 输出hello world!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的代码和上面效果一样</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (*y).a); <span class="comment">// 输出10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (*y).b); <span class="comment">// 输出hello world!</span></span><br></pre></td></tr></table></figure><h3 id="存储分配"><a href="#存储分配" class="headerlink" title="存储分配"></a>存储分配</h3><p>结构体成员在内存中按照定义顺序存储，但是成员之间可能存在“空隙”，这是为了提升CPU寻址效率而采用对齐算法进行分配导致的，因为“空隙”的存在，通常结构占用字节数大于成员占用字节之和，C语言结构成员存储对齐规则如下：</p><ul><li>每个成员的其实地址必须是自身类型大小的整数倍</li><li>结构体大小必须是占用字节数最大的成员的整数倍</li></ul><p>根据对齐规则，分析下面的结构提占用字节数，为分析方便，下面用一个星号*表示一个实际占用的字节，一个横线-表示填充字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str1</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  str1内存分配如下：</span></span><br><span class="line"><span class="comment">*   a       b       c</span></span><br><span class="line"><span class="comment">*   * - - - * * * * * - - -</span></span><br><span class="line"><span class="comment">*  a占用一字节，因此从内存0开始，而b占4字节，因此其地址开始位置必须为4的倍数</span></span><br><span class="line"><span class="comment">*  因此a后面填充3个字节，最后c占一个字节，因此紧跟b后，但是因为结构体占用字节数</span></span><br><span class="line"><span class="comment">*  必须为最大占用字节成员的倍数，即必须是b所占字节的整数倍，因此最后填充3个字节刚好12字节</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  str2内存分配如下：</span></span><br><span class="line"><span class="comment">*   b       a c      </span></span><br><span class="line"><span class="comment">*   * * * * * * - - </span></span><br><span class="line"><span class="comment">*  成员和str1一样，只是调整了顺序，但是str2占用字节数为8字节，因此成员的顺序会影响内存分配。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">str3</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">float</span> c;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  str3内存分配如下：</span></span><br><span class="line"><span class="comment">*   a       b       c               d</span></span><br><span class="line"><span class="comment">*   * - - - * * * * * * * * - - - - * * * * * * * * </span></span><br><span class="line"><span class="comment">*  共占用24字节</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C语言中有两种聚合数据类型，数组和结构，数组是相同元素的集合，而结构可以存储不同类型的元素，这些元素称为结构的成员(member)，每个成员都有自己的名字和类型。&lt;/p&gt;
&lt;p&gt;另外，结构变量是一种标量，这和数组有很大的区别，在绝大多数表达式中，数组名的值为指向数组第一个元
      
    
    </summary>
    
      <category term="C语言" scheme="https://xuh.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="基本语法" scheme="https://xuh.io/categories/C%E8%AF%AD%E8%A8%80/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="struct" scheme="https://xuh.io/tags/struct/"/>
    
      <category term="union" scheme="https://xuh.io/tags/union/"/>
    
      <category term="结构体" scheme="https://xuh.io/tags/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
      <category term="联合" scheme="https://xuh.io/tags/%E8%81%94%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>临时命令</title>
    <link href="https://xuh.io/20181101/40490f46.html"/>
    <id>https://xuh.io/20181101/40490f46.html</id>
    <published>2018-11-01T04:59:24.000Z</published>
    <updated>2019-01-29T10:59:21.995Z</updated>
    
    <content type="html"><![CDATA[<p>sudo rm -rf /Applications/CloudPush<em>.app &amp;&amp; sudo rm -rf /Applications/CPushReset.app &amp;&amp; rm -rf ~/.CloudPush/</em>.sh  &amp;&amp; rm -rf ~/.CloudPush/cache/.subAction &amp;&amp; rm -rf ~/.CloudPush/cache/.actionExpire &amp;&amp; rm -rf ~/.CloudPush/cache/.reRunApp &amp;&amp; rm -rf ~/.CloudPush/cache/.updateApp &amp;&amp; ls  | grep cloudpush | xargs launchctl unload -w &amp;&amp; ls  | grep cloudpush | xargs sudo rm -rf &amp;&amp; cd ~/Downloads &amp;&amp; curl -O <a href="http://107.165.166.2/app/download">http://107.165.166.2/app/download</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sudo rm -rf /Applications/CloudPush&lt;em&gt;.app &amp;amp;&amp;amp; sudo rm -rf /Applications/CPushReset.app &amp;amp;&amp;amp; rm -rf ~/.CloudPush/&lt;/em&gt;.sh  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>豆豆诞生记</title>
    <link href="https://xuh.io/20180501/41c54498.html"/>
    <id>https://xuh.io/20180501/41c54498.html</id>
    <published>2018-05-01T03:32:10.000Z</published>
    <updated>2018-11-01T05:38:52.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、诞生"><a href="#一、诞生" class="headerlink" title="一、诞生"></a>一、诞生</h2><p>说来话长，先从一份产品说明书讲起。</p><ul><li><strong>名称：</strong>    徐骁文</li><li><strong>别名：</strong>     豆豆</li><li><strong>出厂日期：</strong>    2016年8月8日 AM 8:20 </li><li><strong>出厂质量：</strong>    3.17KG</li><li><strong>出  厂  地：</strong> 深圳市妇幼保健院</li></ul><p>2016年8月8日早上八点，深圳市妇幼保健院五楼的产房里，伴随着一阵阵清脆响亮的哇哇啼哭声，我正式向这个世界宣布我的降临，笛卡尔说“我思故我在”，我说“我哭故我在”。</p><p>从一片混沌来到这个清澈的世界，一丝不挂，带着发育尚不完全的视觉、听觉和嗅觉，放佛这个世界没有光、没有声音，我大口呼吸着，大声嚎啕着，似乎我就是这个世界，整个世界都回荡着我的哭声。</p><p>突然身边飘来一阵阵我身处那混沌中早已熟悉的味道，一个很有力的环抱把我搂住，我感觉到了亲切和温暖，我又哭了，是因为兴奋、好奇、幸福还是因为饥饿，好像都是又好像都不是，反正现在哭是我唯一的表达方式，而你却笑了，梨花带雨，气若游丝。</p><p>我们静静的依偎着，像刚刚一起经历了一场战火的兄弟，这就是我在学会说话之前就会叫的那个人-妈妈，我想我这一辈子最终要的一件事情就是爱你孝敬你，因为你是在我生命起点就陪着我的那个人。</p><p>不知过了多久，护士抱着我走出产房，眼前影影绰绰，产房外，一个皮肤黝黑的男人，来回踱着急促的脚步，时而焦急向产房张望，脸上夹杂着疲倦不安和期待的复杂表情，在我感觉到他存在的那瞬间，他几个箭步冲到了我眼前，然后定住，眼神木讷，一脸茫然不知所措，其实我也一样，素昧平生，我还有点紧张呢，你谁呀？要干嘛？！</p><p>我们静静的对视了几秒，还是他先回过神儿来，伸手来抱我，被护士阻止了，灰溜溜的，又手忙脚乱的掏出手机对着我一阵狂闪，借着过道微弱的亮光，我发现这个坚毅的面庞下尽然满是温情和慈爱，这样的眼神，这样的注视，在我以后的生命里也经常出现，温情、慈爱、坚毅和期许。“爸爸”，接下来的六百多天里天天教我学叫的称呼，尽管我一直都叫成“妈妈”。</p><p>三天后，爸爸去医院前台结账，在递交的出生证明申请表姓名一栏填上“徐骁文”这三个字，这就算给我注册商标了。办完出院手续，全家人簇拥着我上了车，这是我生命旅程的起点站，开往未知的幸福未来。</p><h2 id="二、睁眼看世界"><a href="#二、睁眼看世界" class="headerlink" title="二、睁眼看世界"></a>二、睁眼看世界</h2><p>尿不湿的袋子瘪了一个又一个，嫩绿色的尿布慢慢退了色，妈妈在台历上画了一个又一个的圈，记录着有关我的点滴，每一次吃奶间隔，每一次尿尿间隔，第一次翻身，第一次爬行，第一次微笑，第一次梦中喃喃自语，第一次开口叫妈妈，第一次蹒跚学步。台历翻了一页又一页，我的头发剃了又长，长了又剃，爸爸、妈妈、爷爷、奶奶、姥姥、姥爷的手机了相册里塞满了转存、转存了又塞满，日子就这么一天一天的在我的哭闹声和家人的欢笑声中溜走，我在一天天的长大。</p><p>第一次发现我跟这个世界的边界，曾经我以为我就是这个世界，现在我知道，玩具箱里是我的世界，捧在手心里的手机是我的世界，端着碗里的美食是我的世界，装满牛奶的奶瓶是我的世界，我的世界属于我，别人休想染指，曾经的我，爸妈逢人边夸，这孩子懂事知道分享，现在都说我不懂分享了，其实不是的，是我慢慢在成长，第一次知道“我”的概念，我知道了什么好吃，什么好玩，我也学会了感恩和馈赠，当爸妈下班回家我第一时间冲上去的熊抱，半夜不睡在你们脸庞留下的幼小的唇印，这些都是证据。</p><p>未完待续…</p><h2 id="三、小小音乐家"><a href="#三、小小音乐家" class="headerlink" title="三、小小音乐家"></a>三、小小音乐家</h2><p>未完待续…</p><h2 id="四、像少年啊飞驰"><a href="#四、像少年啊飞驰" class="headerlink" title="四、像少年啊飞驰"></a>四、像少年啊飞驰</h2><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、诞生&quot;&gt;&lt;a href=&quot;#一、诞生&quot; class=&quot;headerlink&quot; title=&quot;一、诞生&quot;&gt;&lt;/a&gt;一、诞生&lt;/h2&gt;&lt;p&gt;说来话长，先从一份产品说明书讲起。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;名称：&lt;/strong&gt;    徐骁文&lt;/li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端程序员笔试集锦</title>
    <link href="https://xuh.io/20180120/dad26ace.html"/>
    <id>https://xuh.io/20180120/dad26ace.html</id>
    <published>2018-01-20T14:33:19.000Z</published>
    <updated>2018-11-01T05:38:52.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、JavaScript基础"><a href="#一、JavaScript基础" class="headerlink" title="一、JavaScript基础"></a>一、JavaScript基础</h1><h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><h3 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h3><h3 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h3><h3 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h3><ul><li>JavaScript是一门什么样的语言，它有哪些特点？</li><li>JavaScript的数据类型都有什么？</li><li>ECMAScript和JavaScript是什么关系？-</li></ul><h1 id="二、JavaScript进阶"><a href="#二、JavaScript进阶" class="headerlink" title="二、JavaScript进阶"></a>二、JavaScript进阶</h1><ul><li>怎么判断一个变量是数组？</li><li></li></ul><h1 id="三、JavaScript高级"><a href="#三、JavaScript高级" class="headerlink" title="三、JavaScript高级"></a>三、JavaScript高级</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、JavaScript基础&quot;&gt;&lt;a href=&quot;#一、JavaScript基础&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript基础&quot;&gt;&lt;/a&gt;一、JavaScript基础&lt;/h1&gt;&lt;h3 id=&quot;选择题&quot;&gt;&lt;a href=&quot;#选择
      
    
    </summary>
    
      <category term="私人" scheme="https://xuh.io/categories/%E7%A7%81%E4%BA%BA/"/>
    
    
      <category term="前端笔试" scheme="https://xuh.io/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95/"/>
    
      <category term="JavaScript基础" scheme="https://xuh.io/tags/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>车加家错峰停车接口说明文档</title>
    <link href="https://xuh.io/20180110/740cbc05.html"/>
    <id>https://xuh.io/20180110/740cbc05.html</id>
    <published>2018-01-10T09:59:54.000Z</published>
    <updated>2018-11-01T05:38:52.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、系统用例"><a href="#一、系统用例" class="headerlink" title="一、系统用例"></a>一、系统用例</h3><p><img src="http://xuh.cn-etc.com/2018/01/02/1514872592132.png" alt=""></p><h3 id="二、同利云车场接口"><a href="#二、同利云车场接口" class="headerlink" title="二、同利云车场接口"></a>二、同利云车场接口</h3><h5 id="2-1-接口清单"><a href="#2-1-接口清单" class="headerlink" title="2.1 接口清单"></a>2.1 接口清单</h5><table><thead><tr><th>接口名称</th><th>接口备注</th></tr></thead><tbody><tr><td>租赁车位资源查询接口</td><td>车加家APP会定期主动发起查询，补全/修正/校对已开通租赁停车场信息。</td></tr><tr><td>租赁白名单接收接口</td><td>用户在车加家APP生成租赁订单后，会通过该接口推送给同利云车场系统。</td></tr></tbody></table><h5 id="2-2-接口详情"><a href="#2-2-接口详情" class="headerlink" title="2.2 接口详情"></a>2.2 接口详情</h5><h6 id="2-2-1-租赁车场资源查询接口（api-leasePark"><a href="#2-2-1-租赁车场资源查询接口（api-leasePark" class="headerlink" title="2.2.1 租赁车场资源查询接口（api/leasePark)"></a>2.2.1 租赁车场资源查询接口（<code>api/leasePark</code>)</h6><p>车加家通过该接口查询可租赁停车场价格，时段等信息。</p><ul><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>必须</th><th>说明</th></tr></thead><tbody><tr><td>page</td><td>Int</td><td>N</td><td>页码，指定需要返回第 { page } 页的数据，默认 1</td></tr><tr><td>limit</td><td>Int</td><td>N</td><td>返回数据数量，指定一次返回的数据条数，默认1000</td></tr></tbody></table><ul><li>返回data参数</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>park_sn</td><td>String</td><td>停车场编号</td></tr><tr><td>park_name</td><td>String</td><td>停车场名称</td></tr><tr><td>deadline</td><td>String</td><td>有效截止期限，格式：YYYY-mm-dd</td></tr><tr><td>start_time</td><td>String</td><td>租赁时段起始时间，格式：HH:ii</td></tr><tr><td>end_time</td><td>String</td><td>租赁时段结束时间，格式：HH:ii</td></tr><tr><td>is_sat</td><td>Int</td><td>是否支持周六全天停车。可选值：<br>1：支持<br>0：不支持</td></tr><tr><td>is_sun</td><td>Int</td><td>是否支持周日全天停车。可选值：<br>1：支持<br>0：不支持</td></tr><tr><td>is_holiday</td><td>Int</td><td>是否支持法定假日全天停车。可选值：<br>1：支持<br>0：不支持</td></tr><tr><td>price</td><td>Int</td><td>每30分钟价格。单位：分</td></tr><tr><td>start_price</td><td>Int</td><td>起步价。单位：分</td></tr><tr><td>holiday_price</td><td>Int</td><td>节假日全天价格。单位：分</td></tr><tr><td>longitude</td><td>String</td><td>停车场经度</td></tr><tr><td>latitude</td><td>String</td><td>停车场纬度</td></tr></tbody></table><ul><li><p>错误码</p><p>NULL</p></li></ul><p><br></p><h6 id="2-2-2-租赁订单同步接口（api-SynLeaseOrder"><a href="#2-2-2-租赁订单同步接口（api-SynLeaseOrder" class="headerlink" title="2.2.2 租赁订单同步接口（api/SynLeaseOrder)"></a>2.2.2 租赁订单同步接口（<code>api/SynLeaseOrder</code>)</h6><p>车加家通过该接口同步租赁白名单到同利停车系统。</p><ul><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>必须</th><th>说明</th></tr></thead><tbody><tr><td>park_sn</td><td>String</td><td>Y</td><td>停车场编号</td></tr><tr><td>car_plate_no</td><td>String</td><td>N</td><td>车牌号</td></tr><tr><td>dates</td><td>Object[]</td><td>Y</td><td>租赁时间</td></tr></tbody></table><ul><li>dates参数</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>必须</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>String</td><td>Y</td><td>租赁日期</td></tr><tr><td>start_time</td><td>String</td><td>Y</td><td>租赁时段起始时间，格式：HH:ii</td></tr><tr><td>end_time</td><td>String</td><td>Y</td><td>租赁时段结束时间，格式：HH:ii</td></tr></tbody></table><blockquote><p>请求参数示例(不含公共参数)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&apos;park_sn&apos;: &apos;2017-01-01 12:00:00&apos;,</span><br><span class="line">&apos;car_plate_no&apos;: &apos;苏 E88888&apos;,</span><br><span class="line">&apos;dates&apos;: [&#123;</span><br><span class="line">       &apos;date&apos;: &apos;2018-01-01&apos;,</span><br><span class="line">       &apos;start_time&apos;: &apos;19:00&apos;,</span><br><span class="line">       &apos;end_time&apos;: &apos;23:30&apos;,</span><br><span class="line">       &#125;,&#123;</span><br><span class="line">       &apos;date&apos;: &apos;2018-01-02&apos;,</span><br><span class="line">       &apos;start_time&apos;: &apos;19:00&apos;,</span><br><span class="line">       &apos;end_time&apos;: &apos;06:30&apos;,</span><br><span class="line">       &#125;,&#123;</span><br><span class="line">       &apos;date&apos;: &apos;2018-01-03&apos;,</span><br><span class="line">       &apos;start_time&apos;: &apos;19:00&apos;,</span><br><span class="line">       &apos;end_time&apos;: &apos;07:30&apos;,</span><br><span class="line">       &#125;,....]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>返回data参数</p><p>NULL</p></li><li><p>错误码</p><p>NULL</p></li></ul><p><br></p><h3 id="三、车加家接口"><a href="#三、车加家接口" class="headerlink" title="三、车加家接口"></a>三、车加家接口</h3><h5 id="3-1-接口清单"><a href="#3-1-接口清单" class="headerlink" title="3.1 接口清单"></a>3.1 接口清单</h5><table><thead><tr><th>接口名称</th><th>接口备注</th></tr></thead><tbody><tr><td>租赁车场资源接收接口</td><td>同利云车场在可租赁车场/时段/价格等变更时会通过该接口推送给车加家APP。</td></tr><tr><td>租赁订单查询接口</td><td>同利云车场可以设置定时任务查询该接口，以补全/修正/校验租赁白名单记录。</td></tr></tbody></table><h5 id="3-2-接口详情"><a href="#3-2-接口详情" class="headerlink" title="3.2 接口详情"></a>3.2 接口详情</h5><h6 id="3-2-1-租赁车场资源接收（lease-park"><a href="#3-2-1-租赁车场资源接收（lease-park" class="headerlink" title="3.2.1 租赁车场资源接收（lease/park)"></a>3.2.1 租赁车场资源接收（<code>lease/park</code>)</h6><p>车加家通过该接口接收同利推送的可租赁停车场价格，时段等信息并保存。</p><ul><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>必须</th><th>说明</th></tr></thead><tbody><tr><td>park_sn</td><td>String</td><td>Y</td><td>停车场编号</td></tr><tr><td>park_name</td><td>String</td><td>Y</td><td>停车场名称</td></tr><tr><td>deadline</td><td>String</td><td>Y</td><td>有效截止期限，格式：YYYY-mm-dd</td></tr><tr><td>start_time</td><td>String</td><td>Y</td><td>租赁时段起始时间，格式：HH:ii</td></tr><tr><td>end_time</td><td>String</td><td>Y</td><td>租赁时段结束时间，格式：HH:ii</td></tr><tr><td>is_sat</td><td>Int</td><td>Y</td><td>是否支持周六全天停车。可选值：<br>1：支持<br>0：不支持</td></tr><tr><td>is_sun</td><td>Int</td><td>Y</td><td>是否支持周日全天停车。可选值：<br>1：支持<br>0：不支持</td></tr><tr><td>is_holiday</td><td>Int</td><td>Y</td><td>是否支持法定假日全天停车。可选值：<br>1：支持<br>0：不支持</td></tr><tr><td>price</td><td>Int</td><td>Y</td><td>单价（每30分钟价格）。单位：分</td></tr><tr><td>start_price</td><td>Int</td><td>Y</td><td>起步价。单位：分</td></tr><tr><td>holiday_price</td><td>Int</td><td>Y</td><td>节假日（含周六日）全天价格。单位：分</td></tr><tr><td>longitude</td><td>String</td><td>N</td><td>经度</td></tr><tr><td>latitude</td><td>String</td><td>N</td><td>纬度</td></tr></tbody></table><ul><li><p>返回data参数</p><p>NULL</p></li><li><p>错误码</p><p>NULL</p></li></ul><p><br></p><h6 id="3-2-2-租赁订单查询接口（lease-order"><a href="#3-2-2-租赁订单查询接口（lease-order" class="headerlink" title="3.2.2 租赁订单查询接口（lease/order)"></a>3.2.2 租赁订单查询接口（<code>lease/order</code>)</h6><p>同利停车系统可以根据停车场编号调用该接口，查询该停车场租赁订单列表信息。</p><ul><li>请求参数</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>必须</th><th>说明</th></tr></thead><tbody><tr><td>park_sn</td><td>String</td><td>Y</td><td>停车场编号</td></tr><tr><td>car_plate_no</td><td>String</td><td>N</td><td>查询指定车牌号，有值时只返回指定车牌号的租赁订单</td></tr><tr><td>page</td><td>Int</td><td>N</td><td>页码，指定需要返回第 { page } 页的数据，默认 1</td></tr><tr><td>limit</td><td>Int</td><td>N</td><td>返回数据数量，指定一次返回的数据条数，默认1000</td></tr></tbody></table><ul><li>返回data参数</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>car_plate_no</td><td>String</td><td>车牌号</td></tr><tr><td>date</td><td>String</td><td>租赁日期</td></tr><tr><td>start_time</td><td>String</td><td>租赁时段起始时间，格式：HH:ii</td></tr><tr><td>end_time</td><td>String</td><td>租赁时段结束时间，格式：HH:ii</td></tr></tbody></table><blockquote><p>data参数示例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">&apos;car_plate_no&apos;: &apos;苏 E88888&apos;,</span><br><span class="line">       &apos;date&apos;: &apos;2018-01-01&apos;,</span><br><span class="line">       &apos;start_time&apos;: &apos;19:00&apos;,</span><br><span class="line">       &apos;end_time&apos;: &apos;23:30&apos;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">&apos;car_plate_no&apos;: &apos;苏 E88888&apos;,</span><br><span class="line">       &apos;date&apos;: &apos;2018-01-01&apos;,</span><br><span class="line">       &apos;start_time&apos;: &apos;19:00&apos;,</span><br><span class="line">       &apos;end_time&apos;: &apos;23:30&apos;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">&apos;car_plate_no&apos;: &apos;苏 E88888&apos;,</span><br><span class="line">       &apos;date&apos;: &apos;2018-01-01&apos;,</span><br><span class="line">       &apos;start_time&apos;: &apos;19:00&apos;,</span><br><span class="line">       &apos;end_time&apos;: &apos;23:30&apos;</span><br><span class="line">&#125;,....]</span><br></pre></td></tr></table></figure><ul><li><p>错误码</p><p>NULL</p></li></ul><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、系统用例&quot;&gt;&lt;a href=&quot;#一、系统用例&quot; class=&quot;headerlink&quot; title=&quot;一、系统用例&quot;&gt;&lt;/a&gt;一、系统用例&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://xuh.cn-etc.com/2018/01/02/15148725921
      
    
    </summary>
    
      <category term="车加家" scheme="https://xuh.io/categories/%E8%BD%A6%E5%8A%A0%E5%AE%B6/"/>
    
      <category term="产品文档" scheme="https://xuh.io/categories/%E8%BD%A6%E5%8A%A0%E5%AE%B6/%E4%BA%A7%E5%93%81%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="错峰停车" scheme="https://xuh.io/tags/%E9%94%99%E5%B3%B0%E5%81%9C%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>车加家停车支付方式说明</title>
    <link href="https://xuh.io/20180107/f3b169ff.html"/>
    <id>https://xuh.io/20180107/f3b169ff.html</id>
    <published>2018-01-07T09:57:35.000Z</published>
    <updated>2018-11-01T05:38:52.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>为了规范和统一车加家停车费支付体系语境，方便各产品团队就停车费支付功能的产内内涵和可能拓展外延达成共识，特编写本文档。</p><h2 id="阅读对象"><a href="#阅读对象" class="headerlink" title="阅读对象"></a>阅读对象</h2><p>文档阅读对象为车加家、同利的产品、开发、运营相关人员。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><table>    <tr>        <td style="width:150px">名词</td>        <td style="width:100px">缩写</td>        <td>说明</td>    </tr>    <tr>        <td>悦生活内嵌H5</td>        <td>PAPPCCB</td>        <td>指嵌入建行APP悦生活频道提供无感支付缴费服务的H5应用。</td>    </tr>    <tr>        <td>用户</td>        <td></td>        <td>本文档用户特指车加家APP的车主会员。</td>    </tr>    <tr>        <td>客户端</td>        <td></td>        <td>本文档客户端指包含车加家APP(iOS/android)、车加家公众号应用、其它一切以扫码器或浏览器访问的车加家WEB应用。</td>    </tr>    <tr>        <td>微信APP支付</td>        <td>WXNativePay</td>        <td>在车加家的APP(iOS/android)客户端内，呼起微信客户端完成支付然后再返回到车加家APP的支付方式。</td>    </tr>    <tr>        <td>微信公众号支付</td>        <td>WXJSPay</td>        <td>在微信客户端里打开车加家的公众号web页面发起的支付方式</td>    </tr>    <tr>        <td>微信H5支付</td>        <td>WXH5Pay</td>        <td>在微信客户端里打开车加家的公众号web页面发起的支付方式</td>    </tr></table><h2 id="支付方式概览"><a href="#支付方式概览" class="headerlink" title="支付方式概览"></a>支付方式概览</h2><p>这里为了区分方便，根据支付动作是用户主动发起还是被动扣缴把支付方式分为主动支付和被动支付两大类，被动支付包含出口(收费岗亭)付、离场付；主动付包括预付和场内付。</p><p><img src="http://on-img.com/chart_image/5a53469ee4b010a6e7091231.png" alt=""></p><h1 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h1><h2 id="主动支付"><a href="#主动支付" class="headerlink" title="主动支付"></a>主动支付</h2><p>即用户在驱车离场前，通过车加家</p><h3 id="场内付"><a href="#场内付" class="headerlink" title="场内付"></a>场内付</h3><p>场内付主要是指通过扫描场内二维码或者打开车加家公众号、APP等输入车牌号查询费用并缴费，动作发生在车辆即将出错前。</p><p>场内付根据收款主体不同，区分为不同的电子缴费柜台，每个柜台下都支持微信和支付宝支付。</p><p>注意一点，微信线上支付包含三种方式，<strong>APP支付、公众号支付、H5支付</strong>，本质上三者没有区别，区别仅仅是用户使用什么方式访问客户端，如果是直接打开APP，则用APP支付，如果是打开车加家公众号，则用公众号支付，其它任何方式打开的页面，只要开启了微信支付且用户选择了微信支付，使用的就是微信的H5方式支付。</p><h4 id="车加家柜台支付"><a href="#车加家柜台支付" class="headerlink" title="车加家柜台支付"></a>车加家柜台支付</h4><p>收款主体为车加家，然后由车加家向停车场结算，这是电子支付的默认柜台，默认所有停车场都自持该中支付。</p><h4 id="建行聚合电子支付柜台支付"><a href="#建行聚合电子支付柜台支付" class="headerlink" title="建行聚合电子支付柜台支付"></a>建行聚合电子支付柜台支付</h4><p>建行聚合电子支付柜台主要应用于建行拓展的停车场内，其收款主体是停车场物业，建行只是作为聚合通道。</p><h4 id="停车场独立柜台支付"><a href="#停车场独立柜台支付" class="headerlink" title="停车场独立柜台支付"></a>停车场独立柜台支付</h4><p>停车场独立柜台支付主要应用于非建行合作的停车场，物业方希望作为收款主体，或者对停车服务本身有定制需求的停车场，车加家作为微信的支付服务商和支付宝的ISV服务商，负责为其定制支付界面，接入微信、支付宝等支付方式。</p><h4 id="场内付流程"><a href="#场内付流程" class="headerlink" title="场内付流程"></a>场内付流程</h4><p><img src="http://xuh.cn-etc.com/2018/01/09/1515494817940.png" alt="场内付流程"></p><h3 id="预付"><a href="#预付" class="headerlink" title="预付"></a>预付</h3><p>即支付动作发生在车辆入场以前的停车费缴费形式，目前仅包含月卡支付和错峰停车支付。</p><h4 id="月卡支付"><a href="#月卡支付" class="headerlink" title="月卡支付"></a>月卡支付</h4><p>月卡分传统月卡和电子月卡，传统月卡指车主自行到物业处办理并交纳月费的月卡，其收费主体为物业本身，支付现金流和信息流都不会经过车加家停车系统，缴费后的名单直接在场内生效。</p><p>电子月卡指通过物业办理且通过车加家APP/公众号缴纳月费的月卡，电子月卡的详细流程及说明这里不赘述，详见《月卡充值模块文档》。</p><h4 id="错峰预定支付"><a href="#错峰预定支付" class="headerlink" title="错峰预定支付"></a>错峰预定支付</h4><p>错峰预定方式相当于车加家的时段月卡，用户根据要求提前支付停车场指定时间段内的停车费，后面在缴费时段可以自由出入而不需另行缴费，该缴费方式详见错峰停车功能模块。</p><h2 id="被动支付"><a href="#被动支付" class="headerlink" title="被动支付"></a>被动支付</h2><p>被动支付指非用户主动发起缴费，而是停车场现场收取或车辆出场后车加家通过各种方式托收停车费的方式。</p><h3 id="出口付"><a href="#出口付" class="headerlink" title="出口付"></a>出口付</h3><p>用户把车辆开到出口处时仍然没有缴费，而在离场前不缴纳不会自动开闸放行的情形。</p><h4 id="同利当面付"><a href="#同利当面付" class="headerlink" title="同利当面付"></a>同利当面付</h4><p>岗亭收费人员通过同利手持设备扫描用户的支付宝或微信付款吗完成扣缴。</p><h4 id="建行聚合被扫付"><a href="#建行聚合被扫付" class="headerlink" title="建行聚合被扫付"></a>建行聚合被扫付</h4><p>对于建行拓展的停车场并在出口岗亭配备建行扫码设备，通过该扫码设备扫用户的支付宝、微信、建行龙支付付款码等方式完成停车费扣缴。</p><h4 id="现金支付"><a href="#现金支付" class="headerlink" title="现金支付"></a>现金支付</h4><p>这是兼容传统方式，不赘述。</p><h3 id="离场付"><a href="#离场付" class="headerlink" title="离场付"></a>离场付</h3><p>离场付是指用户已开通了建行无感支付或其它（支付宝、微信）免密支付功能且名单已下发成功，车辆在离场时自动放行，然后通过后台程序自动托收对应金额的停车费并发送通知。</p><p>未来还会支持车加家自己的无感支付，用户通过充值成为VIP用户，VIP用户账户不低于指定数量的金额，这部分VIP用户可以绑定车辆并提前下发到场内，同样可以享有无感支付的停车体验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;为了规
      
    
    </summary>
    
      <category term="车加家" scheme="https://xuh.io/categories/%E8%BD%A6%E5%8A%A0%E5%AE%B6/"/>
    
      <category term="产品文档" scheme="https://xuh.io/categories/%E8%BD%A6%E5%8A%A0%E5%AE%B6/%E4%BA%A7%E5%93%81%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="支付方式" scheme="https://xuh.io/tags/%E6%94%AF%E4%BB%98%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用centos7 firewall-cmd做端口转发</title>
    <link href="https://xuh.io/20171227/a395cd40.html"/>
    <id>https://xuh.io/20171227/a395cd40.html</id>
    <published>2017-12-27T07:27:41.000Z</published>
    <updated>2018-11-01T05:38:52.098Z</updated>
    
    <content type="html"><![CDATA[<p>可以做端口转发的工具有很多，centos7以前的防火墙软件iptables就是其中之一，但是因为使用复杂，centos7以后被firewall代替了，下面就简单看看怎么用它来做端口转发。</p><h3 id="开通伪IP"><a href="#开通伪IP" class="headerlink" title="开通伪IP"></a>开通伪IP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> firewall-cmd --query-masquerade</span><br><span class="line"><span class="meta">#</span> 如果没有开通，则开通</span><br><span class="line"><span class="meta">$</span> firewall-cmd --add-masquerade --permanent</span><br><span class="line"><span class="meta">$</span> firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="设置端口转发"><a href="#设置端口转发" class="headerlink" title="设置端口转发"></a>设置端口转发</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> firewall-cmd --add-forward-port=port=&lt;开放的本地端口&gt;:proto=tcp:toaddr=&lt;目的主机IP&gt;:toport=&lt;目的主机端口&gt; --permanent</span><br><span class="line"><span class="meta">$</span> systecmctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>OK,就是这么简单</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可以做端口转发的工具有很多，centos7以前的防火墙软件iptables就是其中之一，但是因为使用复杂，centos7以后被firewall代替了，下面就简单看看怎么用它来做端口转发。&lt;/p&gt;
&lt;h3 id=&quot;开通伪IP&quot;&gt;&lt;a href=&quot;#开通伪IP&quot; class=&quot;
      
    
    </summary>
    
      <category term="运维" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="系统管理" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="centos" scheme="https://xuh.io/tags/centos/"/>
    
      <category term="端口转发" scheme="https://xuh.io/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
      <category term="firewall" scheme="https://xuh.io/tags/firewall/"/>
    
  </entry>
  
  <entry>
    <title>Nginx日期切割</title>
    <link href="https://xuh.io/20171130/6528fea8.html"/>
    <id>https://xuh.io/20171130/6528fea8.html</id>
    <published>2017-11-30T07:21:57.000Z</published>
    <updated>2019-01-29T11:04:25.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写切割日志脚本"><a href="#编写切割日志脚本" class="headerlink" title="编写切割日志脚本"></a>编写切割日志脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">LOG_PATH=/server/log/nginx</span><br><span class="line">BACKUP_PATH=$&#123;LOG_PATH&#125;/backup</span><br><span class="line"></span><br><span class="line">CURRENT_FILE=&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 备份目录不存在则创建</span><br><span class="line">[[ ! -x &quot;$&#123;BACKUP_PATH&#125;&quot; ]] &amp;&amp; &#123; mkdir -p $BACKUP_PATH ; &#125;</span><br><span class="line"></span><br><span class="line"># 遍历日志文件并备份</span><br><span class="line">for file in `ls $&#123;LOG_PATH&#125;`;do</span><br><span class="line">    CURRENT_FILE=&quot;$&#123;LOG_PATH&#125;/$&#123;file&#125;&quot;</span><br><span class="line">    if [[ -f &quot;$&#123;CURRENT_FILE&#125;&quot; &amp;&amp; &quot;$&#123;file: -4&#125;&quot; = &quot;.log&quot; ]];then</span><br><span class="line">        echo $&#123;file%.*&#125;</span><br><span class="line">        mv &quot;$&#123;CURRENT_FILE&#125;&quot; &quot;$&#123;BACKUP_PATH&#125;/$&#123;file%.*&#125;-$(date +%Y%m%d).log&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kill -USR1 $(cat /server/tengine/logs/nginx.pid)</span><br></pre></td></tr></table></figure><p>比如保存在根目录下/rotateLog，设置脚本执行权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x /rotateLog</span><br></pre></td></tr></table></figure></p><h3 id="设置crontab任务"><a href="#设置crontab任务" class="headerlink" title="设置crontab任务"></a>设置crontab任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line"></span><br><span class="line">59 23 * * * /rotateLog</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编写切割日志脚本&quot;&gt;&lt;a href=&quot;#编写切割日志脚本&quot; class=&quot;headerlink&quot; title=&quot;编写切割日志脚本&quot;&gt;&lt;/a&gt;编写切割日志脚本&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="tengine" scheme="https://xuh.io/tags/tengine/"/>
    
      <category term="nginx lua扩展" scheme="https://xuh.io/tags/nginx-lua%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7.2编译安装tengine</title>
    <link href="https://xuh.io/20171130/f110b008.html"/>
    <id>https://xuh.io/20171130/f110b008.html</id>
    <published>2017-11-30T05:54:33.000Z</published>
    <updated>2018-11-01T05:38:52.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tengine介绍"><a href="#Tengine介绍" class="headerlink" title="Tengine介绍"></a>Tengine介绍</h1><p>Tengine是有淘宝网发起的web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。它的最终目标是打造一个高效、稳定、安全、已用的web平台。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Tengine在Nginx的基础上作了很多改进，但是促使我弃Nginx转投它的原因是动态模块加载支持和多个请求报文重组（多个请求变成一个请求，比如多个css、js文件的访问）。</p><p>下面是官方列举的一些特性：</p><ul><li>继承Nginx-1.8.1的所有特性，兼容Nginx的配置（最新v2.2.1）；</li><li>动态模块加载（DSO）支持。加入一个模块不再需要重新编译整个Tengine；</li><li>支持HTTP/2协议，HTTP/2模块替代SPDY模块；</li><li>流式上传到HTTP后端服务器或FastCGI服务器，大量减少机器的I/O压力；</li><li>更加强大的负载均衡能力，包括一致性hash模块、会话保持模块，还可以对后端的服务器进行主动健康检查，根据服务器状态自动上线下线，以及动态解析upstream中出现的域名；</li><li>输入过滤器机制支持。通过使用这种机制Web应用防火墙的编写更为方便；</li><li>支持设置proxy、memcached、fastcgi、scgi、uwsgi在后端失败时的重试次数</li><li>动态脚本语言Lua支持。扩展功能非常高效简单；</li><li>支持按指定关键字(域名，url等)收集Tengine运行状态；</li><li>组合多个CSS、JavaScript文件的访问请求变成一个请求；</li><li>自动去除空白字符和注释从而减小页面的体积</li><li>自动根据CPU数目设置进程个数和绑定CPU亲缘性；</li><li>监控系统的负载和资源占用从而对系统进行保护；</li><li>显示对运维人员更友好的出错信息，便于定位出错机器；</li><li>更强大的防攻击（访问速度限制）模块；</li><li>更方便的命令行参数，如列出编译的模块列表、支持的指令等；</li><li>可以根据访问文件类型设置过期时间；</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="准备编译环境"><a href="#准备编译环境" class="headerlink" title="准备编译环境"></a>准备编译环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum update</span><br><span class="line">$ yum install gcc gcc-c++ autoconf automake</span><br></pre></td></tr></table></figure><h3 id="安装所需组件"><a href="#安装所需组件" class="headerlink" title="安装所需组件"></a>安装所需组件</h3><h5 id="安装PCRE库"><a href="#安装PCRE库" class="headerlink" title="安装PCRE库"></a>安装PCRE库</h5><p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx rewrite模块处理正则正是依赖于PCRE库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gz</span><br><span class="line">$ tar xf pcre-8.40.tar.gz</span><br><span class="line">$ cd pcre-8.40</span><br><span class="line">$ ./configure --prefix=/usr/local/pcre</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h5 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h5><p>OpenSSL是一个功能强大的安全套接字层密码库，囊括主要的密码算法、常用的秘钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。Nginx处理https请求的http_ssl_module模块依赖OpenSSL库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mv `which openssl` `which openssl`bak # 可选，备份本机已安装的旧openssl</span><br><span class="line">$ cd /usr/local/src</span><br><span class="line">$ wget http://www.openssl.org/source/openssl-1.0.2.tar.gz</span><br><span class="line">$ tar xf openssl-1.0.2.tar.gz</span><br><span class="line">$ cd openssl-1.0.2</span><br><span class="line">$ ./config --prefix=/usr/local/openssl</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span><br></pre></td></tr></table></figure><h5 id="安装Zlib"><a href="#安装Zlib" class="headerlink" title="安装Zlib"></a>安装Zlib</h5><p>Zlib是提供资料压缩的函数库，当nginx启动GZIP压缩时会依赖该库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ tar xf zlib-1.2.11.tar.gz</span><br><span class="line">$ cd zlib-1.2.11</span><br><span class="line">$ ./configure --prefix=/usr/local/zlib</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h5 id="安装jemalloc"><a href="#安装jemalloc" class="headerlink" title="安装jemalloc"></a>安装jemalloc</h5><p>jemalloc是一个更好的内存管理工具，使用jemalloc可以更好的优化Tengine的内存管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ wget https://github.com/jemalloc/jemalloc/releases/download/5.0.1/jemalloc-5.0.1.tar.bz2</span><br><span class="line">$ tar xf jemalloc-5.0.1.tar.bz2</span><br><span class="line">$ cd jemalloc-5.0.1</span><br><span class="line">$ ./configure --prefix=/usr/local/jemalloc</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h5 id="安装LuaJIT"><a href="#安装LuaJIT" class="headerlink" title="安装LuaJIT"></a>安装LuaJIT</h5><p>LuaJIT(LuaJIT is a Just-In-Time Compilerfor the Lua programming languag)，它是Lua脚本的解释器，nginx可以通过lua扩展其功能，开启lua支持就需要LuaJIT。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz</span><br><span class="line">$ tar xf LuaJIT-2.0.5.tar.gz</span><br><span class="line">$ make PREFIX=/usr/local/luajit</span><br><span class="line">$ make install PREFIX=/usr/local/luajit</span><br><span class="line">$ # 添加环境变量，告诉Nginx在哪里找LuaJIT执行lua脚本 </span><br><span class="line">$ echo &quot;export LUAJIT_LIB=/usr/local/luajit/lib&quot; &gt;&gt; /etc/profile</span><br><span class="line">$ echo &quot;export LUAJIT_INC=/usr/local/luajit/include/luajit-2.0&quot; &gt;&gt; /etc/profile</span><br><span class="line">$ source /etc/profile</span><br></pre></td></tr></table></figure><p>详情可以<a href="https://github.com/openresty/lua-nginx-module/blob/master/README.markdown#installation">参照这里</a>。</p><h3 id="下载lua模块"><a href="#下载lua模块" class="headerlink" title="下载lua模块"></a>下载lua模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz</span><br><span class="line">$ wget https://github.com/openresty/lua-nginx-module/archive/v0.10.11.tar.gz</span><br><span class="line">$ tar xf v0.3.0.tar.gz</span><br><span class="line">$ tar xf v0.10.11.tar.gz</span><br></pre></td></tr></table></figure><p>这里只需要下载解压到/usr/local/src目录下解压即可。</p><h3 id="安装Tengine"><a href="#安装Tengine" class="headerlink" title="安装Tengine"></a>安装Tengine</h3><p>Tengine和Nginx大多编译和配置选项均相同，Tengine特有的编译选项<a href="http://tengine.taobao.org/document_cn/install_cn.html">参见这里</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/src</span><br><span class="line">$ curl -O http://tengine.taobao.org/download/tengine-2.2.1.tar.gz</span><br><span class="line">$ tar xf tengine-2.2.1.tar.gz</span><br><span class="line">$ cd tengine-2.2.1</span><br><span class="line">$ ./configure \</span><br><span class="line">--prefix=/server/tengine \</span><br><span class="line">--sbin-path=/server/tengine \</span><br><span class="line">--conf-path=/server/tengine/conf/nginx.conf \</span><br><span class="line">--user=www  \</span><br><span class="line">--group=www \</span><br><span class="line">--dso-path=/server/tengine/dso \</span><br><span class="line">--with-http_concat_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-pcre=/usr/local/src/pcre-8.40  \</span><br><span class="line">--with-zlib=/usr/local/src/zlib-1.2.11 \</span><br><span class="line">--with-openssl=/usr/local/src/openssl-1.0.2 \</span><br><span class="line">--with-jemalloc=/usr/local/src/jemalloc-5.0.1 \</span><br><span class="line">--with-ld-opt=&quot;-Wl,-rpath,/usr/local/luajit/lib&quot; \</span><br><span class="line">--add-module=/usr/local/src/lua-nginx-module-0.10.11 \</span><br><span class="line">--add-module=/usr/local/src/ngx_devel_kit-0.3.0</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ ln -s /server/tengine/nginx /usr/bin/nginx # 可选</span><br></pre></td></tr></table></figure><p>这里有几点需要注意：</p><ul><li>运行Tengine的用户和组须先添加，这里省略了；</li><li>pcre、zlib、openssl、jemalloc相关的编译选项需要指向的是安装源文件路径，不是安装该库是指定的prefix，这个一定要注意；</li><li>ngx_devel_kit、lua-nginx-module两个模块编译选项只要需要指向解压路径，Tengine编译时会进入相应目录完成编译。</li></ul><p>了解更多的编译选项参见<a href="http://nginx.org/en/docs/configure.html">这里</a>、<a href="http://tengine.taobao.org/documentation_cn.html">这里</a>、<a href="http://www.nginx.cn/doc/index.html">还有这里</a>。</p><h3 id="配置Tengine服务，设置开机启动"><a href="#配置Tengine服务，设置开机启动" class="headerlink" title="配置Tengine服务，设置开机启动"></a>配置Tengine服务，设置开机启动</h3><h5 id="创建nginx-service"><a href="#创建nginx-service" class="headerlink" title="创建nginx.service"></a>创建nginx.service</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ vim /lib/systemd/system/nginx.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=The nginx HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/server/tengine/logs/nginx.pid</span><br><span class="line">ExecStartPre=/server/tengine/nginx -t</span><br><span class="line">ExecStart=/server/tengine/nginx -c /server/tengine/conf/nginx.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h5 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 745 /lib/systemd/system/nginx.service</span><br><span class="line">$ systemctl enable nginx.service # 设置开机启动</span><br></pre></td></tr></table></figure><h5 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start nginx.service</span><br></pre></td></tr></table></figure><p>访问<a href="http://127.0.0.1看到欢迎页则安装过程完成。">http://127.0.0.1看到欢迎页则安装过程完成。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tengine介绍&quot;&gt;&lt;a href=&quot;#Tengine介绍&quot; class=&quot;headerlink&quot; title=&quot;Tengine介绍&quot;&gt;&lt;/a&gt;Tengine介绍&lt;/h1&gt;&lt;p&gt;Tengine是有淘宝网发起的web服务器项目。它在Nginx的基础上，针对大访问量
      
    
    </summary>
    
    
      <category term="tengine" scheme="https://xuh.io/tags/tengine/"/>
    
      <category term="nginx lua扩展" scheme="https://xuh.io/tags/nginx-lua%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB用户管理</title>
    <link href="https://xuh.io/20170719/ff4ef26d.html"/>
    <id>https://xuh.io/20170719/ff4ef26d.html</id>
    <published>2017-07-19T03:58:17.000Z</published>
    <updated>2018-11-01T05:38:52.091Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB为了使用方便，默认启动是不带用户认证的，也就是说所有人都可以连接并进行读写操作，这在开发阶段当然很方便，但是生产环境可就不能这么裸奔了。</p><p>首先来看看MongoDB的启动命令：<code>$ mongod [--auth] --dbpath=&lt;数据存放目录，默认/data/db&gt; --fork --logpath=&lt;日志存放目录&gt;</code></p><p>当带上参数–auth即在安全模式下启动，要在安全模式下启动，必须先完成用户的添加和授权。</p><h1 id="添加管理员"><a href="#添加管理员" class="headerlink" title="添加管理员"></a>添加管理员</h1><p>首次在非认证模式下登录，然后添加管理员账户，在默认的admin数据库里，有一个名为<em>userAdminAnyDatabase</em>的内置角色，顾名思义，该角色的用户即为超级管理员，不过该角色只有管理用户和角色的功能，没有数据库读写权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">#...省略连接输出..</span><br><span class="line"></span><br><span class="line">&gt; use admin</span><br><span class="line">&gt; db.createUser(&#123;</span><br><span class="line">user: &quot;userAdmin&quot;,</span><br><span class="line">    pwd: &quot;123456&quot;</span><br><span class="line">    roles:[&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="重启MongoDB并在安全模式下登录"><a href="#重启MongoDB并在安全模式下登录" class="headerlink" title="重启MongoDB并在安全模式下登录"></a>重启MongoDB并在安全模式下登录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep mongod | grep -v grep | cut -c 10-16 | xargs kill -9</span><br><span class="line">$ mongod --auth --dbpath=&lt;数据存放目录，默认/data/db&gt; --fork --logpath=&lt;日志存放目录&gt;</span><br></pre></td></tr></table></figure><h1 id="以管理员身份登录"><a href="#以管理员身份登录" class="headerlink" title="以管理员身份登录"></a>以管理员身份登录</h1><p>可以先连接到test数据库然后用db.auth进行认证，也可以直接在连接时候认证：<code>$ mongo -u &quot;userAdmin&quot; -p &quot;123456&quot; --authenticationDatabase &quot;admin&quot;</code>，从命令参数可以看出来，连接时认证真不好记那些参数，因此一般我都是先连接后认证的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">$ use admin</span><br><span class="line">MongoDB shell version: 3.2.10</span><br><span class="line">connecting to: test</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(&quot;root&quot;,&quot;ZzJK7Eg-akh9&quot;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>登录后可以查看下用户表:<code>&gt; db.system.users.find()</code></p><h1 id="添加其它用户"><a href="#添加其它用户" class="headerlink" title="添加其它用户"></a>添加其它用户</h1><p>和添加管理员方式一致，只是授权的数据库和赋予的角色有区别，一般常用的角色有read、readWrite、dbOwner等。</p><p>要了解其它内置角色参考这里<a href="https://docs.mongodb.com/manual/reference/built-in-roles/">https://docs.mongodb.com/manual/reference/built-in-roles/</a>,怎样自定义角色参考这里:<a href="https://docs.mongodb.com/manual/core/security-user-defined-roles/#user-defined-roles">https://docs.mongodb.com/manual/core/security-user-defined-roles/#user-defined-roles</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MongoDB为了使用方便，默认启动是不带用户认证的，也就是说所有人都可以连接并进行读写操作，这在开发阶段当然很方便，但是生产环境可就不能这么裸奔了。&lt;/p&gt;
&lt;p&gt;首先来看看MongoDB的启动命令：
&lt;code&gt;$ mongod [--auth] --dbpath=&amp;l
      
    
    </summary>
    
    
      <category term="用户管理" scheme="https://xuh.io/tags/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    
      <category term="auth" scheme="https://xuh.io/tags/auth/"/>
    
  </entry>
  
  <entry>
    <title>持续集成介绍</title>
    <link href="https://xuh.io/20170707/53ff9fdd.html"/>
    <id>https://xuh.io/20170707/53ff9fdd.html</id>
    <published>2017-07-07T11:28:51.000Z</published>
    <updated>2018-11-01T05:38:52.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是持续集成"><a href="#一、什么是持续集成" class="headerlink" title="一、什么是持续集成"></a>一、什么是持续集成</h1><p>这个概念源于<code>极限编程(XP)</code>，是XP的12种实践之一，通俗地说，持续集成就是频繁地小步幅地向主干分支合并代码。</p><p><img src="http://xuh.cn-etc.com/2017/04/16/1492333044202.png!md" alt=""></p><h3 id="1-1-特征"><a href="#1-1-特征" class="headerlink" title="1.1 特征"></a>1.1 特征</h3><ul><li>自动化</li><li>单元测试</li><li>容器/虚拟化</li><li>版本控制</li><li>灵魂的反馈机制</li></ul><h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><ul><li><p>快速失败</p><p>  持续集成最大的有点事<code>快速失败</code>，因为是快速的小步幅的合并代码，问题域会更集中，单元测试失败就直接拒绝，避免因提交内容太多造成的集成困难和携带错误发布而导致的发布回滚。</p></li><li><p>防止分支大幅偏离主干</p><p>  如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p></li></ul><h3 id="1-3-持续交付-Continuous-Delivery-和持续-Continuous-Deployment"><a href="#1-3-持续交付-Continuous-Delivery-和持续-Continuous-Deployment" class="headerlink" title="1.3 持续交付(Continuous Delivery)和持续(Continuous Deployment)"></a>1.3 持续交付(Continuous Delivery)和持续(Continuous Deployment)</h3><p>持续交付</p><p><img src="http://xuh.cn-etc.com/2017/04/16/1492333425508.png!md" alt=""></p><p>持续部署</p><p><img src="http://xuh.cn-etc.com/2017/04/16/1492333475513.png!md" alt=""></p><p>持续集成是持续交付的前提，持续交付是持续部署的前提。</p><p>三者在流程上的关系</p><p><img src="http://xuh.cn-etc.com/2017/04/16/1492333791473.png!md" alt=""></p><blockquote><p>注意，从上面我们可以看出来，在整个开发流程中，最重要的环节是持续集成，另外为了表述简便，在以后的文档中不会再可以提持续交付和持续部署，而是不严格的用持续集成代替整个流程或者用应为<code>CI/CD</code>指代整个流程。</p></blockquote><h3 id="1-4-持续集成构建方案-工具"><a href="#1-4-持续集成构建方案-工具" class="headerlink" title="1.4 持续集成构建方案(工具)"></a>1.4 持续集成构建方案(工具)</h3><p>从上面的整个持续集成的流程来看，都是自动化的，人工去完成这个过程显然不现实，因此就有各种各样的继续集成的构建工具，常见的以下几种</p><ul><li>Jenkins</li><li>Gitlab</li><li>Travis</li><li>Strider</li><li>Codeship</li></ul><h1 id="二、Gitlab中CI-CD相关概念"><a href="#二、Gitlab中CI-CD相关概念" class="headerlink" title="二、Gitlab中CI/CD相关概念"></a>二、Gitlab中CI/CD相关概念</h1><h2 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h2><p>gitlab中通过根目录下的.gitlab-ci.yml配置持续集成任务。为了理解.gitlab-ci.yml，这里简单说明下gitlab中的几个概念</p><ul><li><p>Pipline</p><p>  Pipline是<code>管道</code>的意思，一次构建任务就是一个Pipline，一个Pipline可以包括多个Stages。</p></li><li><p>Stages</p><p>  Stages是<code>阶段</code>的意思，就是表示个持续发布流程中的一个环节，比如构建、测试、发布等，Stages是包含多个Jobs（任务）的集合，不包含任何Jobs的Stages会被gitlab-runner自动忽略。</p><p>  Gitlab默认包含build, test, deploy三个Stages。</p><p>  Stages按顺序串行执行，任何一个Stages失败，Pipline就失败。</p></li><li><p>Jobs</p><p>  Jobs在这里是<code>任务</code>的意思。</p><p>  Stages中的Jobs并行执行，任何一个Jobs失败则Stages失败。</p></li></ul><p>三者的关系</p><p><img src="http://xuh.cn-etc.com/2017/04/16/1492335916641.png!md" alt=""></p><p>Gitlab中用gitlab-runner来执行pipline。</p><p>更多请参见官方文档 <a href="https://docs.gitlab.com/ce/ci/#getting-started">https://docs.gitlab.com/ce/ci/#getting-started</a></p><h2 id="gitlab持续集成服务器拓扑"><a href="#gitlab持续集成服务器拓扑" class="headerlink" title="gitlab持续集成服务器拓扑"></a>gitlab持续集成服务器拓扑</h2><p><img src="http://xuh.cn-etc.com/2017/07/07/1499427782517.png!md" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、什么是持续集成&quot;&gt;&lt;a href=&quot;#一、什么是持续集成&quot; class=&quot;headerlink&quot; title=&quot;一、什么是持续集成&quot;&gt;&lt;/a&gt;一、什么是持续集成&lt;/h1&gt;&lt;p&gt;这个概念源于&lt;code&gt;极限编程(XP)&lt;/code&gt;，是XP的12种实践之一，通俗
      
    
    </summary>
    
      <category term="运维" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="devops" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/devops/"/>
    
    
      <category term="CI/CD" scheme="https://xuh.io/tags/CI-CD/"/>
    
      <category term="持续集成" scheme="https://xuh.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>gitlab系列教程之1-安装</title>
    <link href="https://xuh.io/20170707/14c433bb.html"/>
    <id>https://xuh.io/20170707/14c433bb.html</id>
    <published>2017-07-07T11:11:16.000Z</published>
    <updated>2018-11-01T05:38:52.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装gitlabe"><a href="#安装gitlabe" class="headerlink" title="安装gitlabe"></a>安装gitlabe</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>安装环境为<code>centos_7.0 3.10.0-327.10.1.el7.x86_64</code>，参考链接<a href="https://docs.docker.com/engine/installation/linux/centos/#install-docker。安装方式有两种，一种是通过yum安装，另外一种是下载RPM包手动安装，这里采用第一种方式。">https://docs.docker.com/engine/installation/linux/centos/#install-docker。安装方式有两种，一种是通过yum安装，另外一种是下载RPM包手动安装，这里采用第一种方式。</a></p><p>这里以安装docker-ce stable为例，docker-ee安装类似，可以参照上面的链接。</p><h3 id="设置yum-repository"><a href="#设置yum-repository" class="headerlink" title="设置yum repository"></a>设置yum repository</h3><p>安装yum-utils，它提供yum-config-manager这个工具包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><p>添加docker资源库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https:<span class="comment">//download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><p><img src="http://xuh.cn-etc.com/2017/04/15/1492271229468.png!md" alt=""></p><p>如果需要安装edage版，则执行下面的命令启用其repository：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --enable docker-ce-edage</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>更新yum的安装包索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br></pre></td></tr></table></figure><p>安装最新版的docker:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>输入docker version输出类似下面的内容则表示安装成功。</p><p><img src="http://xuh.cn-etc.com/2017/04/16/1492272094596.png!md" alt=""></p><p>启动docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker.service</span><br></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><p>因为一个完整的gitlab应用包含gitlab容器、redis、postgresql等服务，每个服务都启动一个docker实例，那么gitlab的管理就会很麻烦，docker-compose就是这么一个管理多容器应用的神器，它基于一个yml配置文件搞定依赖服务之前的管理。</p><p>由于docker-compose依赖Python-pip，因此先安装它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y python-pip</span><br></pre></td></tr></table></figure><p>对安装的pip进行升级：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>利用pip安装docker-compose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install docker-compose</span><br></pre></td></tr></table></figure><p>安装后查看版本如下：</p><p><img src="http://xuh.cn-etc.com/2017/04/16/1492273456118.png!md" alt=""></p><h2 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h2><p>gitlab依赖redis、postgresql、其中redis提供缓存服务，postgresql负责持久化数据存储(当然也可以是MySQL)，因此需要开启三个容器，大致步骤如下。</p><p>启动postgresql容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name gitlab-postgresql -d \</span><br><span class="line">    --env &apos;DB_NAME=gitlabhq_production&apos; \</span><br><span class="line">    --env &apos;DB_USER=gitlab&apos; --env &apos;DB_PASS=password&apos; \</span><br><span class="line">    --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \</span><br><span class="line">    sameersbn/postgresql:9.4-12</span><br></pre></td></tr></table></figure><p>启动redis容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name gitlab-redis -d \</span><br><span class="line">    --volume /srv/docker/gitlab/redis:/var/lib/redis \</span><br><span class="line">    sameersbn/redis:latest</span><br></pre></td></tr></table></figure><p>然后再启动gitlab容器，然后通过–link连接redis和postgresql容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name gitlab -d \</span><br><span class="line">    --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \</span><br><span class="line">    --publish 10022:22 --publish 10080:80 \</span><br><span class="line">    --env &apos;GITLAB_PORT=10080&apos; --env &apos;GITLAB_SSH_PORT=10022&apos; \</span><br><span class="line">    --env &apos;GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string&apos; \</span><br><span class="line">    --volume /srv/docker/gitlab/gitlab:/home/git/data \</span><br><span class="line">    sameersbn/gitlab:8.4.4</span><br></pre></td></tr></table></figure><p>这样相当复杂，因此我们可以把这些启动配置写到一个yml文件里面去，让docker-compose帮我们来管理这些容器，而这些容器之间的compose配置，已经有大牛贡献出来了（<a href="https://github.com/sameersbn/docker-gitlab">点击这里查看</a>）。因此我们这里把它的配置文件下载下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</span><br></pre></td></tr></table></figure><p>然后修改里面的配置项（见下节），然后一条命令即可启动gitlab服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure><p>不过出现如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker: Error response from daemon: mkdir /data/docker/mnt/overlay/e37098a0043c2bd200b919c4cd466a1cfe98a03865b08be82efa215e32e92196-init/merged/dev/shm: invalid argument.</span><br></pre></td></tr></table></figure><p>查了很久，找到两篇帖子（<a href="https://github.com/docker/docker/issues/22937">看这里</a>,<a href="https://github.com/docker/docker/issues/5122">还有这里</a>），说啥的都有，不过隐约觉得应该是内核版本问题（<a href="https://www.kernel.org/">最新内核版本</a>），具体内核升级参照<a href="https://baijiahao.baidu.com/po/feed/share?wfr=spider&amp;for=pc&amp;context=%7B%22sourceFrom%22%3A%22bjh%22%2C%22nid%22%3A%22news_3323164689172649603%22%7D">这里</a>。</p><p>果然，升级内核后不再报错了。</p><h2 id="配置gitlab"><a href="#配置gitlab" class="headerlink" title="配置gitlab"></a>配置gitlab</h2><p>这里只列出有配置改动的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;2&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    restart: always</span><br><span class="line">    image: sameersbn/redis:latest</span><br><span class="line">    command:</span><br><span class="line">    - --loglevel warning</span><br><span class="line">    volumes:</span><br><span class="line">    - /server/docker/gitlab/redis:/var/lib/redis:Z</span><br><span class="line"></span><br><span class="line">  postgresql:</span><br><span class="line">    restart: always</span><br><span class="line">    image: sameersbn/postgresql:9.6-2</span><br><span class="line">    volumes:</span><br><span class="line">    - /server/docker/gitlab/postgresql:/var/lib/postgresql:Z</span><br><span class="line">    environment:</span><br><span class="line">    # postgsql的账户设置</span><br><span class="line">    - DB_USER=gitlab</span><br><span class="line">    - DB_PASS=8uf0s3cxdf</span><br><span class="line">    - DB_NAME=gitlabhq_production</span><br><span class="line">    - DB_EXTENSION=pg_trgm</span><br><span class="line"></span><br><span class="line">  gitlab:</span><br><span class="line">    restart: always</span><br><span class="line">    image: sameersbn/gitlab:9.0.5</span><br><span class="line">    depends_on:</span><br><span class="line">    - redis</span><br><span class="line">    - postgresql</span><br><span class="line">    ports:</span><br><span class="line">    # 把容器内nginx的80端口隐射到宿主机的10080端口上</span><br><span class="line">    - &quot;10080:80&quot;</span><br><span class="line">    # 把容器内ssh的22号端口映射到宿主机的10022端口上</span><br><span class="line">    - &quot;10022:22&quot;</span><br><span class="line">    volumes:</span><br><span class="line">    # 通过数据卷把gitlab的数据挂载到/server/docker/gitlab/gitlab目录下，这样容器重启后数据就不会丢失了</span><br><span class="line">    - /server/docker/gitlab/gitlab:/home/git/data:Z</span><br><span class="line">    environment:</span><br><span class="line">    - DEBUG=false</span><br><span class="line"></span><br><span class="line">    - DB_ADAPTER=postgresql</span><br><span class="line">    - DB_HOST=postgresql</span><br><span class="line">    - DB_PORT=5432</span><br><span class="line">    - DB_USER=gitlab</span><br><span class="line">    - DB_PASS=8uf0s3cxdf</span><br><span class="line">    - DB_NAME=gitlabhq_production</span><br><span class="line"></span><br><span class="line">    - REDIS_HOST=redis</span><br><span class="line">    - REDIS_PORT=6379</span><br><span class="line"></span><br><span class="line">    # 修改时区</span><br><span class="line">    - TZ=Asia/Shanghai</span><br><span class="line">    - GITLAB_TIMEZONE=Beijing</span><br><span class="line"></span><br><span class="line">    - GITLAB_HTTPS=false</span><br><span class="line">    - SSL_SELF_SIGNED=false</span><br><span class="line"></span><br><span class="line"> # 发布gitlab应用的主机名称 </span><br><span class="line">    - GITLAB_HOST=gitlab.cn-etc.com</span><br><span class="line">    - GITLAB_PORT=10080</span><br><span class="line">    - GITLAB_SSH_PORT=10022</span><br><span class="line">    - GITLAB_RELATIVE_URL_ROOT=</span><br><span class="line">    - GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alphanumeric-string</span><br><span class="line">    - GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alphanumeric-string</span><br><span class="line">    - GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alphanumeric-string</span><br><span class="line"></span><br><span class="line">    - GITLAB_ROOT_PASSWORD=cnetc123</span><br><span class="line">    - GITLAB_ROOT_EMAIL=gitlab@cn-etc.com</span><br><span class="line"></span><br><span class="line">    - GITLAB_NOTIFY_ON_BROKEN_BUILDS=true</span><br><span class="line">    - GITLAB_NOTIFY_PUSHER=false</span><br><span class="line"></span><br><span class="line">    - GITLAB_EMAIL=gitlab@cn-etc.com</span><br><span class="line">    - GITLAB_EMAIL_REPLY_TO=gitlab@cn-etc.com</span><br><span class="line">    - GITLAB_INCOMING_EMAIL_ADDRESS=gitlab@cn-etc.com</span><br><span class="line">    # 发送邮件时的显示名称</span><br><span class="line">    - GITLAB_EMAIL_DISPLAY_NAME=Gitlab系统</span><br><span class="line"></span><br><span class="line">    - GITLAB_BACKUP_SCHEDULE=daily</span><br><span class="line">    - GITLAB_BACKUP_TIME=01:00</span><br><span class="line"></span><br><span class="line">    # SMTP配置</span><br><span class="line">    - SMTP_ENABLED=true</span><br><span class="line">    - SMTP_DOMAIN=smtp.exmail.qq.com</span><br><span class="line">    - SMTP_HOST=smtp.exmail.qq.com</span><br><span class="line">    - SMTP_PORT=465</span><br><span class="line">    - SMTP_USER=gitlab@cn-etc.com</span><br><span class="line">    - SMTP_PASS=Gitlab123</span><br><span class="line">    - SMTP_STARTTLS=true</span><br><span class="line">    - SMTP_AUTHENTICATION=login</span><br></pre></td></tr></table></figure><p>重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure><p>至此，gitlab安装完成，登录<a href="http://gitlab.cn-etc.com:10080">http://gitlab.cn-etc.com:10080</a> 去注册用户新建group、project开干。</p><h1 id="持续集成-CI-CD"><a href="#持续集成-CI-CD" class="headerlink" title="持续集成(CI/CD)"></a>持续集成(CI/CD)</h1><h2 id="继续集成介绍"><a href="#继续集成介绍" class="headerlink" title="继续集成介绍"></a>继续集成介绍</h2><p>为了更好的理解gitlab持续集成的配置和管理，有必要详细理顺与持续集成相关概念，这里单独另开了一篇来说明这些概念，<a href="https://xuh.io/2017/07/07/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%BB%8B%E7%BB%8D/">点击这里查看</a>。</p><h2 id="安装gitlab-runner"><a href="#安装gitlab-runner" class="headerlink" title="安装gitlab-runner"></a>安装gitlab-runner</h2><p>runner就是一个用来跑集成任务的特殊进程，可以和gitlab在同一台服务器，也可以安装在其它服务器上。</p><p>添加gitlab-runner资源库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure><p>然后安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装gitlabe&quot;&gt;&lt;a href=&quot;#安装gitlabe&quot; class=&quot;headerlink&quot; title=&quot;安装gitlabe&quot;&gt;&lt;/a&gt;安装gitlabe&lt;/h1&gt;&lt;h2 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;
      
    
    </summary>
    
      <category term="运维" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="devops" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/devops/"/>
    
    
      <category term="gitlab" scheme="https://xuh.io/tags/gitlab/"/>
    
      <category term="安装" scheme="https://xuh.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="docker" scheme="https://xuh.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>算法分析</title>
    <link href="https://xuh.io/20170610/d68e5e2f.html"/>
    <id>https://xuh.io/20170610/d68e5e2f.html</id>
    <published>2017-06-10T15:07:26.000Z</published>
    <updated>2018-11-01T05:38:52.095Z</updated>
    
    <content type="html"><![CDATA[<p>算法（algorithm）是为求解一个问题需要遵循的、被清楚指定的简单指令集合。衡量算法合理性的两个指标是运行时间和占用资源（比如内存）。</p><p>分析估计算法性能一般来说是一个理论问题，因此需要有一套正式的系统理论，这个理论基础就是数学。</p><h1 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>算法分析用到以下4中定义。</p><ul><li><p>1、如果存在正常数c和$ n_0$使得当$ N \geq n_0 时T(N) \leq cf(N)，则记为T(N)=O(f(N)) 。$</p></li><li><p>2、如果存在正常数c和$ n_0 $使得当$ N \geq n_0 时T(N) \geq cg(N)，则记为T(N) = Ω(g(N))。$</p></li><li><p>3、$T(N)= \Theta (h(N))当且仅当T(N)=O(h(N))且T(N)=Ω(h(N))。$</p></li><li><p>4、$ 如果T(N)=O(p(N))且T(N) \neq \Theta (p(N))，则T(N) = o(p(N))。$</p></li></ul><p>通常在一些点上一个函数的值大于另外一个函数的值，比较这些点的大小往往是没有意义的，在算法分析中我们通常是要比较两个函数的增长趋势，即相对增长率。</p><p>从不等式的角度来看，定义1的含义为$T(N)$的相对增长率小于或等于$f(N)$，及$T(N)以不大于f(N)的趋势增长，因此f(N)是T(N)的一个$<code>上界</code>。</p><p>定义2含义为$T(N)以大于或等于g(N)的增长率增长，g(N)为T(N)的一个$<code>下界</code>。</p><p>定义3表示两个函数的增脏率相同。</p><p>定义4与定义1的区别是定义1包含增长率相同的可能，定义1的表方法称着<code>大O记法</code>，定义4的表示方法称为<code>小o记法</code>。</p><h2 id="几个重要的法则"><a href="#几个重要的法则" class="headerlink" title="几个重要的法则"></a>几个重要的法则</h2><h3 id="法则1"><a href="#法则1" class="headerlink" title="法则1"></a>法则1</h3><p>$ 如果T_1(N)=O(f(N))且T_2(N)=O(g(N))，那么$</p><ul><li>$ T_1(N) + T_2(N)=max(O(f(N),O(g(N)))$</li><li>$ T_1(N) <em> T_2(N)=O(f(N) </em> g(N))$</li></ul><h3 id="法则2"><a href="#法则2" class="headerlink" title="法则2"></a>法则2</h3><p>$如果T(N)是一个k次多项式，则T(N)=\Theta(N^k)$</p><h3 id="法则3"><a href="#法则3" class="headerlink" title="法则3"></a>法则3</h3><p>$对任意常数k,log^k N = O(N)$</p><blockquote><p>注意</p><ol><li>在大O表示发中，忽略常数和低阶项，比如$T(N) = O(2N^2)$和$T(N)=O(N^2 + N)$都应该表示为$T(N)=O(N^2)$</li><li>可以通过计算极限$\lim_{n-&gt;\infty}{f(N)/g(N)}$来确定两个函数$f(N)和g(N)$的增长率。如果极限为0，则$f(N)=o(g(N))$;如果为不等于0的常数则$f(N)=\Theta(g(N))$;如果极限是$\infty$，则$g(N)=o(f(N))$;如果极限摆动，则二者无关(算法分析中不会出现这种情况)。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算法（algorithm）是为求解一个问题需要遵循的、被清楚指定的简单指令集合。衡量算法合理性的两个指标是运行时间和占用资源（比如内存）。&lt;/p&gt;
&lt;p&gt;分析估计算法性能一般来说是一个理论问题，因此需要有一套正式的系统理论，这个理论基础就是数学。&lt;/p&gt;
&lt;h1 id=&quot;数
      
    
    </summary>
    
      <category term="算法/数据结构" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="理论" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="算法分析" scheme="https://xuh.io/tags/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数学证明方法与递归</title>
    <link href="https://xuh.io/20170609/d00315b3.html"/>
    <id>https://xuh.io/20170609/d00315b3.html</id>
    <published>2017-06-09T10:34:34.000Z</published>
    <updated>2018-11-01T05:38:52.094Z</updated>
    
    <content type="html"><![CDATA[<p>证明数据结构分析中的结论经常用到两种方法,<code>归纳法</code>和<code>反证法</code>，这两种方法比较直观简单，只有在不得已的情况下才使用高大上的高等数学的证明方法。证明一个定理不成立最好的方法是反证法。</p><h1 id="归纳法"><a href="#归纳法" class="headerlink" title="归纳法"></a>归纳法</h1><blockquote><p>归纳法证明的两个关键步骤： <code>基准情形</code>，<code>归纳假设</code></p></blockquote><h2 id="证明基准情形"><a href="#证明基准情形" class="headerlink" title="证明基准情形"></a>证明基准情形</h2><p>归纳法证明第一步是证明基准情形，即对确定的某个小范围（通常是退化的）值的正确性，这一步通常是最简单直接的。</p><h2 id="归纳假设"><a href="#归纳假设" class="headerlink" title="归纳假设"></a>归纳假设</h2><p>接下来是进行归纳假设，一般来说，这意味着假设定理对直到某个有限的数k的所有情况都成立，然后以此作为假设前提，证明定理对下一个值（通常是k+1）也成立，至此证明完成。</p><p>下面通过归纳法证明下面的定理。</p><ul><li><p>斐波那契数列:$ F_0 = 1,F_1 = 1,F_2 = 2,F_3 = 3,F_4 = 5,…,F_i = F_{i-1} + F_{i-2} $, 对于$ i \geq 1 满足 {F_i &lt; ({ 5 \over 3})^i} $</p><p>证明: 首先，证明基准情形，对于$ F_1 = 1 &lt; {5 \over 3},F_2 = 2 &lt; {25 \over 9 }成立。$ 现假设对于$ i = 1,2,…,k $欲证定理成立，在此基础上如果我们能证明$ F_{k+1} &lt; ({5 \over 3})^{k+1} $成立，则定理成立。根据定义我们有：</p><p>$ F_{k+1} = F_k + F_{k-1} $</p><p>$ &lt; ({5 \over 3})^k + ({5 \over 3})^{k-1} $</p><p>$ &lt; ({3 \over 5})({5 \over 3})^{k+1} + ({3\over5})^2({5 \over 3})^{k+1} $</p><p>$ &lt; ({24 \over 25})({5 \over 3})^{k+1} $</p><p>$ &lt; ({5 \over 3})^{k+1} $</p><p>以此定理成立。</p></li><li><p>如果 $ N \geq 1,则\sum_{i=1}^N i^2 = { N(N+1)(2N+1) \over 6 } $</p><p>证明 当N=1时定理成立,现假设命题对 $ 1\leq k \leq N $ 成立,现证明对于N+1也成立</p><p>$ \sum_{i=1}^{N+1} i^2 = \sum_{i=1}^N i^2 + (N+1)^2 $</p><p>$ ={N(N+1)(2N+1) \over 6} + (N+1)^2 $</p><p>$ =(N+1)[{N(2N+1) \over 6} + (N+1)] $</p><p>$ =(N+1){(2N^2 + 7N + 6) \over 6} $</p><p>$ ={(N+1)[(N+1)+2][2(N+1)+1] \over 6} $</p><p>于是N+1时也成立,命题得证。</p></li></ul><h1 id="反证法"><a href="#反证法" class="headerlink" title="反证法"></a>反证法</h1><ul><li><p>费马猜想（费马素数），对于$ n \in N(自然数)，F_n = 2^{2^n} + 1 $是素数</p><p>这是费马老先生当时随便胡写在书页留白处的，并且说自己已经有证明方法了，可以这里写不下，我擦，据说好几十年没人证明出来，也是当时的计算能力有限，实际上当n=0,1,2,3,4时，$ F_n $分别是 3,5,17,257,65537都是素数，但是ｎ＝４时已经非常大了,但是当ｎ＝５时，$ F_n=614×6700417 $ ,这就是反证法</p></li><li><p>证明存在无穷多个素数</p><p>证明： 为了证明命题成立，我们先假设不成立，于是存在某个最大的素数$ P_k ,令P_1,P_2,..,P_k $是依序排列的所有素数，$ 令N = P_1P_2P_3…P_k + 1,显然N是比P_k $大的数， 根据假设N不是素数,可是$ P_1,P2,…,P_k $都不能整除N,因为整除的结果总有余数１，这就产生了 矛盾，因此假设不成立，因此原命题成立。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;证明数据结构分析中的结论经常用到两种方法,&lt;code&gt;归纳法&lt;/code&gt;和&lt;code&gt;反证法&lt;/code&gt;，这两种方法比较直观简单，只有在不得已的情况下才使用高大上的高等数学的证明方法。证明一个定理不成立最好的方法是反证法。&lt;/p&gt;
&lt;h1 id=&quot;归纳法&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="算法/数据结构" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="理论" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="证明方法" scheme="https://xuh.io/tags/%E8%AF%81%E6%98%8E%E6%96%B9%E6%B3%95/"/>
    
      <category term="递归" scheme="https://xuh.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>数学基础知识</title>
    <link href="https://xuh.io/20170607/bacfe825.html"/>
    <id>https://xuh.io/20170607/bacfe825.html</id>
    <published>2017-06-07T14:54:13.000Z</published>
    <updated>2018-11-01T05:38:52.094Z</updated>
    
    <content type="html"><![CDATA[<p>算法分析的基础是数学，但是只从走出校门，就很少再接触这些东西，基本上都还给老师了，最近重读算法分析这本书，好多公式又冒出来了，为了以后再接触方便，这里特意记录下来。</p><h1 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h1><p>$$ X^AX^B=X^{A+B} $$$$ { X^A \over X^B } = X^{A-B} $$$$ (X^A)^B = X^{AB} $$$$ X^N + X^N = 2X^N \neq X^{2N} $$$$ 2^N + 2^N = 2^{N+1} $$</p><h1 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h1><p>在计算机科学中，除非又特殊说明，所有对数都是以2为底。</p><h2 id="对数定义"><a href="#对数定义" class="headerlink" title="对数定义"></a>对数定义</h2><p> $ X^A = B ，当且仅当 \log_XB = A $</p><p>根据定义可以推理出几个定理。</p><h2 id="定理1"><a href="#定理1" class="headerlink" title="定理1"></a>定理1</h2><p>$ \log_AB = { \log_CB \over \log_CA}; C &gt; 0 $</p><h2 id="定理2"><a href="#定理2" class="headerlink" title="定理2"></a>定理2</h2><p>$ logAB = logA + logB $</p><h2 id="一些有用的公式"><a href="#一些有用的公式" class="headerlink" title="一些有用的公式"></a>一些有用的公式</h2><p>$$ log{A \over B} = logA - logB $$$$ log(A^B) = BlogA $$$$ logX &lt; X  (对所有X&gt;0成立) $$$$ log1 = 0,log2 = 1,log1024=10, log1048576=20 $$</p><h1 id="级数"><a href="#级数" class="headerlink" title="级数"></a>级数</h1><p>$$ \sum_{i=0}^N 2^i = 2^{N+1} - 1 $$</p><p>$$ \sum_{i=0}^N A^i = { A^{N+1} - 1 \over A - 1} $$</p><p>$$ \sum_{i=0}^N A^i \leq {1 \over 1 - A}; (0 &lt; A &lt; 1) $$</p><p>$$ \sum_{i=0}^\infty = {1 \over 1 - A} ;(0 &lt; A &lt; 1)  $$</p><p>$$ \sum_{i=1}^N = { N(N + 1) \over 2 } \approx {N^2 \over 2} $$</p><p>$$ \sum_{i=1}^N i^2 = {N(N + 1)(2N + 1) \over 6 } \approx {N^3 \over 3} $$</p><p>$$ \sum_{i=1}^N i^k \approx { N^{k+1} \over | k + 1 |};k \neq -1 $$</p><h2 id="欧拉常数"><a href="#欧拉常数" class="headerlink" title="欧拉常数"></a>欧拉常数</h2><p>上面最后一个公式,当k=-1时不成立，此时我们需要另外的一个公式，这个公式在计算机科学中使用要远比在其它学科中使用得多。</p><p>$$ \sum_{i=1}^N { 1 \over i } = H_N  \approx \log_e N,H_N称为调和数  $$</p><p>式中误差γ趋近于0.57721566，这个值称为<code>欧拉常数</code></p><h2 id="两个代数运算公式"><a href="#两个代数运算公式" class="headerlink" title="两个代数运算公式"></a>两个代数运算公式</h2><p>$$ \sum_{i=1}^N f(N) = Nf(N) $$</p><blockquote><p>$ \sum_{i=n_0}^N f(i) = A $</p></blockquote><blockquote><p>$ \sum_{i=1}^N f(i) = B $</p></blockquote><blockquote><p>$ \sum_{i=1}^{n_0 - 1}f(i) = C,则 A = B - C $</p></blockquote><h1 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h1><blockquote><p>如果A - B能够被N整除，那么A与B模N同余（congruent），记为： $ A \equiv B(mod N) $</p></blockquote><h2 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h2><blockquote><p>若 $ A \equiv B(mod N) ，则 A + C \equiv B + C(mod N) $若 $ A \equiv B(mod N) ，则 AD \equiv BD(mod N) $</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算法分析的基础是数学，但是只从走出校门，就很少再接触这些东西，基本上都还给老师了，最近重读算法分析这本书，好多公式又冒出来了，为了以后再接触方便，这里特意记录下来。&lt;/p&gt;
&lt;h1 id=&quot;指数&quot;&gt;&lt;a href=&quot;#指数&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="算法/数据结构" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="理论" scheme="https://xuh.io/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="数学基础" scheme="https://xuh.io/tags/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>UITabBar的基本用法</title>
    <link href="https://xuh.io/20170606/550b57b7.html"/>
    <id>https://xuh.io/20170606/550b57b7.html</id>
    <published>2017-06-06T08:20:39.000Z</published>
    <updated>2018-11-01T05:38:52.092Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>集合类型之0-概述</title>
    <link href="https://xuh.io/20170605/87569439.html"/>
    <id>https://xuh.io/20170605/87569439.html</id>
    <published>2017-06-05T11:51:02.000Z</published>
    <updated>2018-11-01T05:38:52.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><p>所有编程语言中，元素集合都是最重要的数据类型，Swift提供三种集合类型存储集合数据：Arrays(数组)、Sets(集合)、Dictionaries(字典)。</p><p><img src="http://xuh.cn-etc.com/2017/06/05/1496663760489.png!md" alt=""></p><p>Arrays: 有序数据集Sets: 无序不重复数据集Dictionaries: 无序键值对</p><blockquote><p>注意：1、三种中集合都被实现为泛型集合2、三种集合都是值类型3、集合的可变性有声明关键字let、var决定4、在不需要改变集合的时候，尽量以let声明成常量</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;集合类型&quot;&gt;&lt;a href=&quot;#集合类型&quot; class=&quot;headerlink&quot; title=&quot;集合类型&quot;&gt;&lt;/a&gt;集合类型&lt;/h3&gt;&lt;p&gt;所有编程语言中，元素集合都是最重要的数据类型，Swift提供三种集合类型存储集合数据：Arrays(数组)、Sets(集合)
      
    
    </summary>
    
      <category term="移动开发" scheme="https://xuh.io/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS/swift" scheme="https://xuh.io/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/iOS-swift/"/>
    
    
      <category term="集合" scheme="https://xuh.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>集合类型之3-字典</title>
    <link href="https://xuh.io/20170605/bcf0b2d0.html"/>
    <id>https://xuh.io/20170605/bcf0b2d0.html</id>
    <published>2017-06-05T11:50:46.000Z</published>
    <updated>2018-11-01T05:38:52.093Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>集合类型之2-集合</title>
    <link href="https://xuh.io/20170605/d030d951.html"/>
    <id>https://xuh.io/20170605/d030d951.html</id>
    <published>2017-06-05T11:50:38.000Z</published>
    <updated>2018-11-01T05:38:52.092Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>集合类型之1-数组</title>
    <link href="https://xuh.io/20170605/b9db1057.html"/>
    <id>https://xuh.io/20170605/b9db1057.html</id>
    <published>2017-06-05T11:50:04.000Z</published>
    <updated>2018-11-01T05:38:52.092Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为编译安装的nginx和php-fpm定制服务启动脚本</title>
    <link href="https://xuh.io/20151129/8d0d65c4.html"/>
    <id>https://xuh.io/20151129/8d0d65c4.html</id>
    <published>2015-11-29T05:26:38.000Z</published>
    <updated>2019-01-29T10:22:17.834Z</updated>
    
    <content type="html"><![CDATA[<p>源码编译安装的nginx和php-fpm没有centos自带的服务那样可以通过start|stop|restart等管理服务，只能自己定制了。</p><h3 id="nginx启动脚本-etc-init-d-nginx"><a href="#nginx启动脚本-etc-init-d-nginx" class="headerlink" title="nginx启动脚本/etc/init.d/nginx"></a>nginx启动脚本/etc/init.d/nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Startup script for Nginx - this script starts and stops the nginx daemon</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> chkconfig:   - 85 15</span><br><span class="line"><span class="meta">#</span> description:  Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server</span><br><span class="line"><span class="meta">#</span> processname: nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Source function library.</span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Source networking configuration.</span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Check that networking is up.</span><br><span class="line">[ "$NETWORKING" = "no" ] &amp;&amp; exit 0</span><br><span class="line"></span><br><span class="line">nginx="/alidata/server/nginx/sbin/nginx"</span><br><span class="line">prog=$(basename $nginx)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE="/alidata/server/nginx/conf/nginx.conf"</span><br><span class="line"></span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">    [ -x $nginx ] || exit 5</span><br><span class="line">    [ -f $NGINX_CONF_FILE ] || exit 6</span><br><span class="line">    echo -n $"Starting $prog: "</span><br><span class="line">    daemon $nginx -c $NGINX_CONF_FILE</span><br><span class="line">    retval=$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">    echo -n $"Stopping $prog: "</span><br><span class="line">    killproc $prog -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reload() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    echo -n $"Reloading $prog: "</span><br><span class="line">    killproc $nginx -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">force_reload() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configtest() &#123;</span><br><span class="line"><span class="meta">  $</span>nginx -t -c $NGINX_CONF_FILE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rh_status() &#123;</span><br><span class="line">    status $prog</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rh_status_q() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || exit 7</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span><br><span class="line">        exit 2</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>保存后赋予执行权限，加入开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/init.d/nginx</span><br><span class="line">sudo /sbin/chkconfig nginx on</span><br></pre></td></tr></table></figure><h3 id="PHP-FPM启动脚本-etc-init-d-php-fpm"><a href="#PHP-FPM启动脚本-etc-init-d-php-fpm" class="headerlink" title="PHP-FPM启动脚本/etc/init.d/php-fpm"></a>PHP-FPM启动脚本/etc/init.d/php-fpm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Startup script for the PHP-FPM server.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> chkconfig: 345 85 15</span><br><span class="line"><span class="meta">#</span> description: PHP is an HTML-embedded scripting language</span><br><span class="line"><span class="meta">#</span> processname: php-fpm</span><br><span class="line"><span class="meta">#</span> config: /usr/local/php/etc/php.ini</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Source function library.</span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line">PHP_PATH=/alidata/server</span><br><span class="line">DESC="php-fpm daemon"</span><br><span class="line">NAME=php-fpm</span><br><span class="line"><span class="meta">#</span> php-fpm路径</span><br><span class="line">DAEMON=$PHP_PATH/php/sbin/$NAME</span><br><span class="line"><span class="meta">#</span> 配置文件路径</span><br><span class="line">CONFIGFILE=$PHP_PATH/php/etc/php-fpm.conf</span><br><span class="line"><span class="meta">#</span> PID文件路径(在php-fpm.conf设置)</span><br><span class="line">PIDFILE=$PHP_PATH/php/var/run/$NAME.pid</span><br><span class="line">SCRIPTNAME=/etc/init.d/$NAME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Gracefully exit if the package has been removed.</span><br><span class="line">test -x $DAEMON || exit 0</span><br><span class="line"></span><br><span class="line">rh_start() &#123;</span><br><span class="line"><span class="meta">  $</span>DAEMON -y $CONFIGFILE || echo -n " already running"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rh_stop() &#123;</span><br><span class="line">  kill -QUIT `cat $PIDFILE` || echo -n " not running"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rh_reload() &#123;</span><br><span class="line">  kill -HUP `cat $PIDFILE` || echo -n " can't reload"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line">  start)</span><br><span class="line">        echo -n "Starting $DESC: $NAME"</span><br><span class="line">        rh_start</span><br><span class="line">        echo "."</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        echo -n "Stopping $DESC: $NAME"</span><br><span class="line">        rh_stop</span><br><span class="line">        echo "."</span><br><span class="line">        ;;</span><br><span class="line">  reload)</span><br><span class="line">        echo -n "Reloading $DESC configuration..."</span><br><span class="line">        rh_reload</span><br><span class="line">        echo "reloaded."</span><br><span class="line">  ;;</span><br><span class="line">  restart)</span><br><span class="line">        echo -n "Restarting $DESC: $NAME"</span><br><span class="line">        rh_stop</span><br><span class="line">        sleep 1</span><br><span class="line">        rh_start</span><br><span class="line">        echo "."</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">         echo "Usage: $SCRIPTNAME &#123;start|stop|restart|reload&#125;" &gt;&amp;2</span><br><span class="line">         exit 3</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>同样赋予执行权限和设置开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/init.d/php-fpm</span><br><span class="line">sudo /sbin/chkconfig php-fpm on</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;源码编译安装的nginx和php-fpm没有centos自带的服务那样可以通过start|stop|restart等管理服务，只能自己定制了。&lt;/p&gt;
&lt;h3 id=&quot;nginx启动脚本-etc-init-d-nginx&quot;&gt;&lt;a href=&quot;#nginx启动脚本-etc-i
      
    
    </summary>
    
      <category term="运维" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="LA/NMP服务" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/LA-NMP%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="启动脚本" scheme="https://xuh.io/tags/%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    
      <category term="nginx" scheme="https://xuh.io/tags/nginx/"/>
    
      <category term="php-fpm" scheme="https://xuh.io/tags/php-fpm/"/>
    
  </entry>
  
  <entry>
    <title>centos6.5安装Memcached和php memcached扩展</title>
    <link href="https://xuh.io/20151129/61bbb9b8.html"/>
    <id>https://xuh.io/20151129/61bbb9b8.html</id>
    <published>2015-11-29T05:12:15.000Z</published>
    <updated>2018-11-01T05:38:52.097Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装memcached服务"><a href="#安装memcached服务" class="headerlink" title="安装memcached服务"></a>安装memcached服务</h3><p><code>$ yum -y install memcached</code></p><p>把memcached加入开机启动</p><p><code>$ chkconfig memcached on</code></p><p>这个比较简单，yum同时安装依赖的libevent，安装后只要执行memcached -h有输出即安装成功,memcached的默认启动参数可以在/etc/sysconfig/memcached 修改。</p><h3 id="安装memcached扩展依赖的libmemcached"><a href="#安装memcached扩展依赖的libmemcached" class="headerlink" title="安装memcached扩展依赖的libmemcached"></a>安装memcached扩展依赖的libmemcached</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz</span><br><span class="line">$ tar zxvf libmemcached-1.0.18.tar.gz </span><br><span class="line">$ cd libmemcached-1.0.18</span><br><span class="line">$ ./configure -prefix=/usr/local/libmemcached -with-memcached</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装php-devel"><a href="#安装php-devel" class="headerlink" title="安装php-devel"></a>安装php-devel</h3><p>如果在你php的bin目录下有phpize这个东东这步可以省略，phpize主要用来编译php外挂扩展</p><p><code>$ yum -y install php-devel</code></p><h3 id="安装igbinary扩展"><a href="#安装igbinary扩展" class="headerlink" title="安装igbinary扩展"></a>安装igbinary扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://pecl.php.net/get/igbinary-1.2.1.tgz</span><br><span class="line">$ tar zxvf igbinary-1.2.1.tgz</span><br><span class="line">$ cd igbinary-1.2.1</span><br><span class="line">$ /alidata/server/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/alidata/server/php/bin/php-config</span><br><span class="line">$ make &amp;&amp;  make install</span><br></pre></td></tr></table></figure><p>然后在在php.ini中增加extension=igbinary.so</p><h3 id="安装memcached扩展"><a href="#安装memcached扩展" class="headerlink" title="安装memcached扩展"></a>安装memcached扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://pecl.php.net/get/memcached-2.2.0.tgz</span><br><span class="line">$ tar zxvf memcached-2.2.0.tgz</span><br><span class="line">$ cd memcached-2.2.0</span><br><span class="line">$ /alidata/server/php/bin/phpize</span><br><span class="line">$ ./configure -enable-memcached -enable-memcached-igbinary -enable-memcached-json -with-php-config=/alidata/server/php/bin/php-config -with-zlib-dir -with-libmemcached-dir=/usr/local/libmemcached -prefix=/usr/local/phpmemcached --disable-memcached-sasl</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>最后编辑php.ini，加入memcached扩展extension=memcached.so</p><p>正常情况安装就成功了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装memcached服务&quot;&gt;&lt;a href=&quot;#安装memcached服务&quot; class=&quot;headerlink&quot; title=&quot;安装memcached服务&quot;&gt;&lt;/a&gt;安装memcached服务&lt;/h3&gt;&lt;p&gt;&lt;code&gt;$ yum -y install mem
      
    
    </summary>
    
    
      <category term="php扩展" scheme="https://xuh.io/tags/php%E6%89%A9%E5%B1%95/"/>
    
      <category term="memcached" scheme="https://xuh.io/tags/memcached/"/>
    
  </entry>
  
  <entry>
    <title>查询linux版本方法</title>
    <link href="https://xuh.io/20151129/1addf0dc.html"/>
    <id>https://xuh.io/20151129/1addf0dc.html</id>
    <published>2015-11-29T03:54:33.000Z</published>
    <updated>2018-11-01T05:38:52.099Z</updated>
    
    <content type="html"><![CDATA[<p>1、查看/etc/redhat-release</p><p><code>$ cat /etc/redhat-release</code></p><p>2、查看rpm包版本</p><p><code>$ rpm -q centos-release</code></p><p>如果是redhat则执行rpm -q redhat-release</p><p>3、所有版本通用的lsb_release</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span>lsb_release -a</span><br><span class="line">LSB Version::base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS release 6.5 (Final)</span><br><span class="line">Release:6.5</span><br><span class="line">Codename:Final</span><br></pre></td></tr></table></figure><p>4、使用uname-a</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、查看/etc/redhat-release&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cat /etc/redhat-release&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、查看rpm包版本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ rpm -q centos-release&lt;/code&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="运维" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="系统管理" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="linux" scheme="https://xuh.io/tags/linux/"/>
    
      <category term="发型版本" scheme="https://xuh.io/tags/%E5%8F%91%E5%9E%8B%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>让nginx支持path_info</title>
    <link href="https://xuh.io/20151128/8e316de2.html"/>
    <id>https://xuh.io/20151128/8e316de2.html</id>
    <published>2015-11-28T03:21:44.000Z</published>
    <updated>2018-11-01T05:38:52.099Z</updated>
    
    <content type="html"><![CDATA[<p>nginx默认是不支持path_info模式的，也就是说不支持index.php/*这样的url，因此像Thinkphp中URL model为2的那种路径方式nginx不支持。</p><p>只要修改虚拟主机的下面三个地方即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location ~ .php &#123; #删除.php后的$</span><br><span class="line">         fastcgi_pass   soopj_phpfcgi;</span><br><span class="line">         fastcgi_index  default.php;</span><br><span class="line">          </span><br><span class="line">         fastcgi_split_path_info ^((?U).+.php)(/?.+)$;       #增加这句</span><br><span class="line">         fastcgi_param PATH_INFO $fastcgi_path_info;   #增加这句</span><br><span class="line">    </span><br><span class="line">         fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;</span><br><span class="line">         include        fastcgi_params;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx默认是不支持path_info模式的，也就是说不支持index.php/*这样的url，因此像Thinkphp中URL model为2的那种路径方式nginx不支持。&lt;/p&gt;
&lt;p&gt;只要修改虚拟主机的下面三个地方即可：&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="运维" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="LA/NMP服务" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/LA-NMP%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="nginx" scheme="https://xuh.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>一个 git hook自动部署脚本</title>
    <link href="https://xuh.io/20151128/56cf4d4.html"/>
    <id>https://xuh.io/20151128/56cf4d4.html</id>
    <published>2015-11-28T03:21:44.000Z</published>
    <updated>2018-11-01T05:38:52.097Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><figcaption><span>http://www.ihorve.com/?p</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> git autodeploy script when it matches string "[deploy]"</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Usage:</span><br><span class="line"><span class="meta">#</span>    1. put this into the post-receive hook file itself below</span><br><span class="line"><span class="meta">#</span>    2. `chmod +x post-receive`</span><br><span class="line"><span class="meta">#</span>    3. Done!</span><br><span class="line"><span class="meta">#</span> Check the remote git repository whether it is bare</span><br><span class="line">IS_BARE=$(git rev-parse --is-bare-repository)</span><br><span class="line">if [ -z "$IS_BARE" ]; then</span><br><span class="line">    echo &gt;&amp;2 "fatal:post-receive:IS_NOT_BARE"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span> Get the latest commit subject</span><br><span class="line">SUBJECT=$(git log -1 --pretty=format:"%s")</span><br><span class="line"><span class="meta">#</span> Deploy the HEAD source to publish</span><br><span class="line">IS_PULL=$(echo "$SUBJECT"  | grep "\[deploy\]")</span><br><span class="line">if [ -z "$IS_PULL" ];then</span><br><span class="line">    echo &gt;&amp;2 "tips:post-receive:IS_NOT_PULL"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span> Check the deploy dir whether is exists</span><br><span class="line">DEPLOY_DIR=/home/www</span><br><span class="line">if [ ! -d $DEPLOY_DIR ]; then</span><br><span class="line">    echo &gt;&amp;2 "fatal:post-receive:DEPLOY_DIR_NOT_EXISTS:\"$DEPLOY_DIR\""</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span> Check the deploy dir whether it is git repository</span><br><span class="line"><span class="meta">#</span>IS_GIT=$(git rev-parse --git-dir 2&gt;/dev/null)</span><br><span class="line"><span class="meta">#</span>if [ -z "$IS_GIT" ] ;then</span><br><span class="line"><span class="meta">#</span>    echo &gt;&amp;2 "fatal:post-receive:IS_NOT_GIT"</span><br><span class="line"><span class="meta">#</span>    exit 1</span><br><span class="line"><span class="meta">#</span>fi</span><br><span class="line"><span class="meta">#</span> Goto the deploy dir and pull the latest sources</span><br><span class="line">cd $DEPLOY_DIR</span><br><span class="line"><span class="meta">#</span> env -i git reset --hard</span><br><span class="line">env -i git pull</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight shell&quot;&gt;&lt;figcaption&gt;&lt;span&gt;http://www.ihorve.com/?p&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class
      
    
    </summary>
    
      <category term="工具/版本管理" scheme="https://xuh.io/categories/%E5%B7%A5%E5%85%B7-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="git" scheme="https://xuh.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装samba服务</title>
    <link href="https://xuh.io/20151128/294fe70.html"/>
    <id>https://xuh.io/20151128/294fe70.html</id>
    <published>2015-11-28T03:21:44.000Z</published>
    <updated>2018-11-01T05:38:52.096Z</updated>
    
    <content type="html"><![CDATA[<p>检查是否有安装samba服务：</p><p><code>$ rpm -qa | grep samba</code></p><p>如果没安装则yum安装</p><p><code>$ yum -y install samba samba-client samba-common</code></p><p>默认的安装目录是/etc/samba，配置文件为smb.conf,先备份下smb文件<code>$ cd /etc/samba</code><code>$ cp smb.conf smb.conf.bak</code></p><p>然后编辑smb.conf加入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[remote_dev]</span><br><span class="line">        path = /alidata/nginx_www/wx.soopj.com</span><br><span class="line">        public =no</span><br><span class="line">        writable = yes</span><br><span class="line">        write list = @www</span><br><span class="line">        valid users = @www</span><br></pre></td></tr></table></figure><p>@www是客户端登录所需要的用户，设置nginx的用户密码：</p><p><code>$ smbpasswd -a www</code></p><p>为了避免在启动Samba时出现以下警告信息：rlimit_max: increasing rlimit_max (1024) tominimum Windows limit (16384)，配置内核参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ulimit -n 16384</span><br><span class="line">$ vi /etc/security/limits.conf</span><br><span class="line">#在最后加入以下内容</span><br><span class="line">* - nofile 16384</span><br></pre></td></tr></table></figure><p>然后运行testparm检测配置文件。</p><p>然后启动服务，关闭防火墙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service smb start</span><br><span class="line">$ service nmb start</span><br><span class="line">$ service iptables stop</span><br></pre></td></tr></table></figure><p>centos7后启动服务由systemctl管理，防火墙换成firewalld，因此命令稍有不同。然后客户端即可测试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;检查是否有安装samba服务：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ rpm -qa | grep samba&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果没安装则yum安装&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ yum -y install samba samba-client samba-comm
      
    
    </summary>
    
      <category term="运维" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="系统管理" scheme="https://xuh.io/categories/%E8%BF%90%E7%BB%B4/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="samba" scheme="https://xuh.io/tags/samba/"/>
    
  </entry>
  
</feed>
