<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[测试加密]]></title>
    <url>%2F20180103%2Fd1ee6067.html</url>
    <content type="text"><![CDATA[var CACHE_KEY = "hexo-x-" + window.location.pathname.substr(window.location.pathname.lastIndexOf("/") + 1).split(".")[0]; function doDecrypt(pwd, onError) { //console.log("in doDecrypt"); var txt = document.getElementById("enc_content").innerHTML; var plantext; try { var bytes = CryptoJS.AES.decrypt(txt, pwd); plaintext = bytes.toString(CryptoJS.enc.Utf8); cookie.set(CACHE_KEY,pwd,{path:"/",expires: 1}); } catch(err) { if(onError) {onError(err);} return; } document.getElementById("enc_content").innerHTML = plaintext; document.getElementById("enc_content").style.display = "block"; document.getElementById("enc_passwd").style.display = "none"; } window.onload = function(){ var cachePwd = cookie.get(CACHE_KEY)||"" if(cachePwd !== "") doDecrypt(cachePwd, onError); } U2FsdGVkX18u8eItpFOSoFPPTK3hQFVLml6EzWKONg9ABW/78PqkaFC5zbus92bCNgofys9sCVvrWaQ2996npg== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>车加家</category>
        <category>产品文档</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用centos7]]></title>
    <url>%2F20171227%2Fa395cd40.html</url>
    <content type="text"><![CDATA[可以做端口转发的工具有很多，centos7以前的防火墙软件iptables就是其中之一，但是因为使用复杂，centos7以后被firewall代替了，下面就简单看看怎么用它来做端口转发。 开通伪IP1234$ firewall-cmd --query-masquerade# 如果没有开通，则开通$ firewall-cmd --add-masquerade --permanent$ firewall-cmd --reload 设置端口转发12$ firewall-cmd --add-forward-port=port=&lt;开放的本地端口&gt;:proto=tcp:toaddr=&lt;目的主机IP&gt;:toport=&lt;目的主机端口&gt; --permanent$ systecmctl restart firewalld.service OK,就是这么简单]]></content>
      <categories>
        <category>运维</category>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>端口转发</tag>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx日期切割]]></title>
    <url>%2F20171130%2F6528fea8.html</url>
    <content type="text"><![CDATA[编写切割日志脚本123456789101112131415161718192021#!/bin/bashLOG_PATH=/server/log/nginxBACKUP_PATH=$&#123;LOG_PATH&#125;/backupCURRENT_FILE=&quot;&quot;# 备份目录不存在则创建[[ ! -x &quot;$&#123;BACKUP_PATH&#125;&quot; ]] &amp;&amp; &#123; mkdir -p $BACKUP_PATH ; &#125;# 遍历日志文件并备份for file in `ls $&#123;LOG_PATH&#125;`;do CURRENT_FILE=&quot;$&#123;LOG_PATH&#125;/$&#123;file&#125;&quot; if [[ -f &quot;$&#123;CURRENT_FILE&#125;&quot; &amp;&amp; &quot;$&#123;file: -4&#125;&quot; = &quot;.log&quot; ]];then echo $&#123;file%.*&#125; mv &quot;$&#123;CURRENT_FILE&#125;&quot; &quot;$&#123;BACKUP_PATH&#125;/$&#123;file%.*&#125;-$(date +%Y%m%d).log&quot; fidonekill -USR1 $(cat /server/tengine/logs/nginx.pid) 比如保存在根目录下/rotateLog，设置脚本执行权限1$ chmod +x /rotateLog 设置crontab任务123$ crontab -e59 23 * * * /rotateLog]]></content>
      <tags>
        <tag>tengine</tag>
        <tag>nginx lua扩展</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7.2编译安装tengine]]></title>
    <url>%2F20171130%2Ff110b008.html</url>
    <content type="text"><![CDATA[Tengine介绍Tengine是有淘宝网发起的web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。它的最终目标是打造一个高效、稳定、安全、已用的web平台。 特性Tengine在Nginx的基础上作了很多改进，但是促使我弃Nginx转投它的原因是动态模块加载支持和多个请求报文重组（多个请求变成一个请求，比如多个css、js文件的访问）。 下面是官方列举的一些特性： 继承Nginx-1.8.1的所有特性，兼容Nginx的配置（最新v2.2.1）； 动态模块加载（DSO）支持。加入一个模块不再需要重新编译整个Tengine； 支持HTTP/2协议，HTTP/2模块替代SPDY模块； 流式上传到HTTP后端服务器或FastCGI服务器，大量减少机器的I/O压力； 更加强大的负载均衡能力，包括一致性hash模块、会话保持模块，还可以对后端的服务器进行主动健康检查，根据服务器状态自动上线下线，以及动态解析upstream中出现的域名； 输入过滤器机制支持。通过使用这种机制Web应用防火墙的编写更为方便； 支持设置proxy、memcached、fastcgi、scgi、uwsgi在后端失败时的重试次数 动态脚本语言Lua支持。扩展功能非常高效简单； 支持按指定关键字(域名，url等)收集Tengine运行状态； 组合多个CSS、JavaScript文件的访问请求变成一个请求； 自动去除空白字符和注释从而减小页面的体积 自动根据CPU数目设置进程个数和绑定CPU亲缘性； 监控系统的负载和资源占用从而对系统进行保护； 显示对运维人员更友好的出错信息，便于定位出错机器； 更强大的防攻击（访问速度限制）模块； 更方便的命令行参数，如列出编译的模块列表、支持的指令等； 可以根据访问文件类型设置过期时间； 安装准备编译环境12$ yum update$ yum install gcc gcc-c++ autoconf automake 安装所需组件安装PCRE库PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx rewrite模块处理正则正是依赖于PCRE库。 123456$ cd /usr/local/src$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gz$ tar xf pcre-8.40.tar.gz$ cd pcre-8.40$ ./configure --prefix=/usr/local/pcre$ make &amp;&amp; make install 安装OpenSSLOpenSSL是一个功能强大的安全套接字层密码库，囊括主要的密码算法、常用的秘钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。Nginx处理https请求的http_ssl_module模块依赖OpenSSL库。 12345678$ mv `which openssl` `which openssl`bak # 可选，备份本机已安装的旧openssl$ cd /usr/local/src$ wget http://www.openssl.org/source/openssl-1.0.2.tar.gz$ tar xf openssl-1.0.2.tar.gz$ cd openssl-1.0.2$ ./config --prefix=/usr/local/openssl$ make &amp;&amp; make install$ ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl 安装ZlibZlib是提供资料压缩的函数库，当nginx启动GZIP压缩时会依赖该库。 12345$ cd /usr/local/src$ tar xf zlib-1.2.11.tar.gz$ cd zlib-1.2.11$ ./configure --prefix=/usr/local/zlib$ make &amp;&amp; make install 安装jemallocjemalloc是一个更好的内存管理工具，使用jemalloc可以更好的优化Tengine的内存管理。 123456$ cd /usr/local/src$ wget https://github.com/jemalloc/jemalloc/releases/download/5.0.1/jemalloc-5.0.1.tar.bz2$ tar xf jemalloc-5.0.1.tar.bz2$ cd jemalloc-5.0.1$ ./configure --prefix=/usr/local/jemalloc$ make &amp;&amp; make install 安装LuaJITLuaJIT(LuaJIT is a Just-In-Time Compilerfor the Lua programming languag)，它是Lua脚本的解释器，nginx可以通过lua扩展其功能，开启lua支持就需要LuaJIT。 123456789$ cd /usr/local/src$ wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz$ tar xf LuaJIT-2.0.5.tar.gz$ make PREFIX=/usr/local/luajit$ make install PREFIX=/usr/local/luajit$ # 添加环境变量，告诉Nginx在哪里找LuaJIT执行lua脚本 $ echo &quot;export LUAJIT_LIB=/usr/local/luajit/lib&quot; &gt;&gt; /etc/profile$ echo &quot;export LUAJIT_INC=/usr/local/luajit/include/luajit-2.0&quot; &gt;&gt; /etc/profile$ source /etc/profile 详情可以参照这里。 下载lua模块12345$ cd /usr/local/src$ wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz$ wget https://github.com/openresty/lua-nginx-module/archive/v0.10.11.tar.gz$ tar xf v0.3.0.tar.gz$ tar xf v0.10.11.tar.gz 这里只需要下载解压到/usr/local/src目录下解压即可。 安装TengineTengine和Nginx大多编译和配置选项均相同，Tengine特有的编译选项参见这里。 1234567891011121314151617181920212223242526$ cd /usr/local/src$ curl -O http://tengine.taobao.org/download/tengine-2.2.1.tar.gz$ tar xf tengine-2.2.1.tar.gz$ cd tengine-2.2.1$ ./configure \--prefix=/server/tengine \--sbin-path=/server/tengine \--conf-path=/server/tengine/conf/nginx.conf \--user=www \--group=www \--dso-path=/server/tengine/dso \--with-http_concat_module \--with-http_stub_status_module \--with-http_ssl_module \--with-http_gzip_static_module \--with-http_realip_module \--with-pcre=/usr/local/src/pcre-8.40 \--with-zlib=/usr/local/src/zlib-1.2.11 \--with-openssl=/usr/local/src/openssl-1.0.2 \--with-jemalloc=/usr/local/src/jemalloc-5.0.1 \--with-ld-opt=&quot;-Wl,-rpath,/usr/local/luajit/lib&quot; \--add-module=/usr/local/src/lua-nginx-module-0.10.11 \--add-module=/usr/local/src/ngx_devel_kit-0.3.0$ make &amp;&amp; make install$ ln -s /server/tengine/nginx /usr/bin/nginx # 可选 这里有几点需要注意： 运行Tengine的用户和组须先添加，这里省略了； pcre、zlib、openssl、jemalloc相关的编译选项需要指向的是安装源文件路径，不是安装该库是指定的prefix，这个一定要注意； ngx_devel_kit、lua-nginx-module两个模块编译选项只要需要指向解压路径，Tengine编译时会进入相应目录完成编译。 了解更多的编译选项参见这里、这里、还有这里。 配置Tengine服务，设置开机启动创建nginx.service1234567891011121314151617$ vim /lib/systemd/system/nginx.service[Unit]Description=The nginx HTTP and reverse proxy serverAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/server/tengine/logs/nginx.pidExecStartPre=/server/tengine/nginx -tExecStart=/server/tengine/nginx -c /server/tengine/conf/nginx.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target 设置开机启动12$ chmod 745 /lib/systemd/system/nginx.service$ systemctl enable nginx.service # 设置开机启动 开启服务1$ systemctl start nginx.service 访问http://127.0.0.1看到欢迎页则安装过程完成。]]></content>
      <tags>
        <tag>tengine</tag>
        <tag>nginx lua扩展</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB用户管理]]></title>
    <url>%2F20170719%2Fff4ef26d.html</url>
    <content type="text"><![CDATA[MongoDB为了使用方便，默认启动是不带用户认证的，也就是说所有人都可以连接并进行读写操作，这在开发阶段当然很方便，但是生产环境可就不能这么裸奔了。 首先来看看MongoDB的启动命令：$ mongod [--auth] --dbpath=&lt;数据存放目录，默认/data/db&gt; --fork --logpath=&lt;日志存放目录&gt; 当带上参数–auth即在安全模式下启动，要在安全模式下启动，必须先完成用户的添加和授权。 添加管理员首次在非认证模式下登录，然后添加管理员账户，在默认的admin数据库里，有一个名为userAdminAnyDatabase的内置角色，顾名思义，该角色的用户即为超级管理员，不过该角色只有管理用户和角色的功能，没有数据库读写权限。 123456789$ mongo#...省略连接输出..&gt; use admin&gt; db.createUser(&#123; user: &quot;userAdmin&quot;, pwd: &quot;123456&quot; roles:[&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;) 重启MongoDB并在安全模式下登录12$ ps -ef | grep mongod | grep -v grep | cut -c 10-16 | xargs kill -9$ mongod --auth --dbpath=&lt;数据存放目录，默认/data/db&gt; --fork --logpath=&lt;日志存放目录&gt; 以管理员身份登录可以先连接到test数据库然后用db.auth进行认证，也可以直接在连接时候认证：$ mongo -u &quot;userAdmin&quot; -p &quot;123456&quot; --authenticationDatabase &quot;admin&quot;，从命令参数可以看出来，连接时认证真不好记那些参数，因此一般我都是先连接后认证的方式： 12345678$ mongo$ use adminMongoDB shell version: 3.2.10connecting to: test&gt; use adminswitched to db admin&gt; db.auth(&quot;root&quot;,&quot;ZzJK7Eg-akh9&quot;)1 登录后可以查看下用户表:&gt; db.system.users.find() 添加其它用户和添加管理员方式一致，只是授权的数据库和赋予的角色有区别，一般常用的角色有read、readWrite、dbOwner等。 要了解其它内置角色参考这里https://docs.mongodb.com/manual/reference/built-in-roles/,怎样自定义角色参考这里:https://docs.mongodb.com/manual/core/security-user-defined-roles/#user-defined-roles]]></content>
      <tags>
        <tag>用户管理</tag>
        <tag>auth</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[持续集成介绍]]></title>
    <url>%2F20170707%2F53ff9fdd.html</url>
    <content type="text"><![CDATA[一、什么是持续集成这个概念源于极限编程(XP)，是XP的12种实践之一，通俗地说，持续集成就是频繁地小步幅地向主干分支合并代码。 1.1 特征 自动化 单元测试 容器/虚拟化 版本控制 灵魂的反馈机制 1.2 优点 快速失败 持续集成最大的有点事快速失败，因为是快速的小步幅的合并代码，问题域会更集中，单元测试失败就直接拒绝，避免因提交内容太多造成的集成困难和携带错误发布而导致的发布回滚。 防止分支大幅偏离主干 如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。 1.3 持续交付(Continuous Delivery)和持续(Continuous Deployment)持续交付 持续部署 持续集成是持续交付的前提，持续交付是持续部署的前提。 三者在流程上的关系 注意，从上面我们可以看出来，在整个开发流程中，最重要的环节是持续集成，另外为了表述简便，在以后的文档中不会再可以提持续交付和持续部署，而是不严格的用持续集成代替整个流程或者用应为CI/CD指代整个流程。 1.4 持续集成构建方案(工具)从上面的整个持续集成的流程来看，都是自动化的，人工去完成这个过程显然不现实，因此就有各种各样的继续集成的构建工具，常见的以下几种 Jenkins Gitlab Travis Strider Codeship 二、Gitlab中CI/CD相关概念一些基本概念gitlab中通过根目录下的.gitlab-ci.yml配置持续集成任务。为了理解.gitlab-ci.yml，这里简单说明下gitlab中的几个概念 Pipline Pipline是管道的意思，一次构建任务就是一个Pipline，一个Pipline可以包括多个Stages。 Stages Stages是阶段的意思，就是表示个持续发布流程中的一个环节，比如构建、测试、发布等，Stages是包含多个Jobs（任务）的集合，不包含任何Jobs的Stages会被gitlab-runner自动忽略。 Gitlab默认包含build, test, deploy三个Stages。 Stages按顺序串行执行，任何一个Stages失败，Pipline就失败。 Jobs Jobs在这里是任务的意思。 Stages中的Jobs并行执行，任何一个Jobs失败则Stages失败。 三者的关系 Gitlab中用gitlab-runner来执行pipline。 更多请参见官方文档 https://docs.gitlab.com/ce/ci/#getting-started gitlab持续集成服务器拓扑]]></content>
      <categories>
        <category>运维</category>
        <category>devops</category>
      </categories>
      <tags>
        <tag>CI/CD</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitlab系列教程之1-安装]]></title>
    <url>%2F20170707%2F14c433bb.html</url>
    <content type="text"><![CDATA[安装gitlabe安装docker安装环境为centos_7.0 3.10.0-327.10.1.el7.x86_64，参考链接https://docs.docker.com/engine/installation/linux/centos/#install-docker。安装方式有两种，一种是通过yum安装，另外一种是下载RPM包手动安装，这里采用第一种方式。 这里以安装docker-ce stable为例，docker-ee安装类似，可以参照上面的链接。 设置yum repository安装yum-utils，它提供yum-config-manager这个工具包： 1$ sudo yum install -y yum-utils 添加docker资源库： 123$ sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo 如果需要安装edage版，则执行下面的命令启用其repository： 1$ sudo yum-config-manager --enable docker-ce-edage 安装更新yum的安装包索引： 1$ sudo yum makecache fast 安装最新版的docker: 1$ sudo yum install docker-ce 输入docker version输出类似下面的内容则表示安装成功。 启动docker服务 1$ sudo systemctl start docker.service 安装docker-compose因为一个完整的gitlab应用包含gitlab容器、redis、postgresql等服务，每个服务都启动一个docker实例，那么gitlab的管理就会很麻烦，docker-compose就是这么一个管理多容器应用的神器，它基于一个yml配置文件搞定依赖服务之前的管理。 由于docker-compose依赖Python-pip，因此先安装它： 1$ sudo yum install -y python-pip 对安装的pip进行升级： 1$ sudo pip install --upgrade pip 利用pip安装docker-compose 1$ sudo pip install docker-compose 安装后查看版本如下： 安装gitlabgitlab依赖redis、postgresql、其中redis提供缓存服务，postgresql负责持久化数据存储(当然也可以是MySQL)，因此需要开启三个容器，大致步骤如下。 启动postgresql容器 12345$ docker run --name gitlab-postgresql -d \ --env &apos;DB_NAME=gitlabhq_production&apos; \ --env &apos;DB_USER=gitlab&apos; --env &apos;DB_PASS=password&apos; \ --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \ sameersbn/postgresql:9.4-12 启动redis容器 123docker run --name gitlab-redis -d \ --volume /srv/docker/gitlab/redis:/var/lib/redis \ sameersbn/redis:latest 然后再启动gitlab容器，然后通过–link连接redis和postgresql容器 1234567docker run --name gitlab -d \ --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \ --publish 10022:22 --publish 10080:80 \ --env &apos;GITLAB_PORT=10080&apos; --env &apos;GITLAB_SSH_PORT=10022&apos; \ --env &apos;GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string&apos; \ --volume /srv/docker/gitlab/gitlab:/home/git/data \ sameersbn/gitlab:8.4.4 这样相当复杂，因此我们可以把这些启动配置写到一个yml文件里面去，让docker-compose帮我们来管理这些容器，而这些容器之间的compose配置，已经有大牛贡献出来了（点击这里查看）。因此我们这里把它的配置文件下载下来 1$ wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml 然后修改里面的配置项（见下节），然后一条命令即可启动gitlab服务 1$ docker-compose up 不过出现如下错误： 1docker: Error response from daemon: mkdir /data/docker/mnt/overlay/e37098a0043c2bd200b919c4cd466a1cfe98a03865b08be82efa215e32e92196-init/merged/dev/shm: invalid argument. 查了很久，找到两篇帖子（看这里,还有这里），说啥的都有，不过隐约觉得应该是内核版本问题（最新内核版本），具体内核升级参照这里。 果然，升级内核后不再报错了。 配置gitlab这里只列出有配置改动的部分： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990version: &apos;2&apos;services: redis: restart: always image: sameersbn/redis:latest command: - --loglevel warning volumes: - /server/docker/gitlab/redis:/var/lib/redis:Z postgresql: restart: always image: sameersbn/postgresql:9.6-2 volumes: - /server/docker/gitlab/postgresql:/var/lib/postgresql:Z environment: # postgsql的账户设置 - DB_USER=gitlab - DB_PASS=8uf0s3cxdf - DB_NAME=gitlabhq_production - DB_EXTENSION=pg_trgm gitlab: restart: always image: sameersbn/gitlab:9.0.5 depends_on: - redis - postgresql ports: # 把容器内nginx的80端口隐射到宿主机的10080端口上 - &quot;10080:80&quot; # 把容器内ssh的22号端口映射到宿主机的10022端口上 - &quot;10022:22&quot; volumes: # 通过数据卷把gitlab的数据挂载到/server/docker/gitlab/gitlab目录下，这样容器重启后数据就不会丢失了 - /server/docker/gitlab/gitlab:/home/git/data:Z environment: - DEBUG=false - DB_ADAPTER=postgresql - DB_HOST=postgresql - DB_PORT=5432 - DB_USER=gitlab - DB_PASS=8uf0s3cxdf - DB_NAME=gitlabhq_production - REDIS_HOST=redis - REDIS_PORT=6379 # 修改时区 - TZ=Asia/Shanghai - GITLAB_TIMEZONE=Beijing - GITLAB_HTTPS=false - SSL_SELF_SIGNED=false # 发布gitlab应用的主机名称 - GITLAB_HOST=gitlab.cn-etc.com - GITLAB_PORT=10080 - GITLAB_SSH_PORT=10022 - GITLAB_RELATIVE_URL_ROOT= - GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alphanumeric-string - GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alphanumeric-string - GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alphanumeric-string - GITLAB_ROOT_PASSWORD=cnetc123 - GITLAB_ROOT_EMAIL=gitlab@cn-etc.com - GITLAB_NOTIFY_ON_BROKEN_BUILDS=true - GITLAB_NOTIFY_PUSHER=false - GITLAB_EMAIL=gitlab@cn-etc.com - GITLAB_EMAIL_REPLY_TO=gitlab@cn-etc.com - GITLAB_INCOMING_EMAIL_ADDRESS=gitlab@cn-etc.com # 发送邮件时的显示名称 - GITLAB_EMAIL_DISPLAY_NAME=Gitlab系统 - GITLAB_BACKUP_SCHEDULE=daily - GITLAB_BACKUP_TIME=01:00 # SMTP配置 - SMTP_ENABLED=true - SMTP_DOMAIN=smtp.exmail.qq.com - SMTP_HOST=smtp.exmail.qq.com - SMTP_PORT=465 - SMTP_USER=gitlab@cn-etc.com - SMTP_PASS=Gitlab123 - SMTP_STARTTLS=true - SMTP_AUTHENTICATION=login 重新启动 1$ docker-compose up 至此，gitlab安装完成，登录http://gitlab.cn-etc.com:10080 去注册用户新建group、project开干。 持续集成(CI/CD)继续集成介绍为了更好的理解gitlab持续集成的配置和管理，有必要详细理顺与持续集成相关概念，这里单独另开了一篇来说明这些概念，点击这里查看。 安装gitlab-runnerrunner就是一个用来跑集成任务的特殊进程，可以和gitlab在同一台服务器，也可以安装在其它服务器上。 添加gitlab-runner资源库 1$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash 然后安装 1$ sudo yum install -y gitlab-ci-multi-runner]]></content>
      <categories>
        <category>运维</category>
        <category>devops</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>安装</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法分析]]></title>
    <url>%2F20170610%2Fd68e5e2f.html</url>
    <content type="text"><![CDATA[算法（algorithm）是为求解一个问题需要遵循的、被清楚指定的简单指令集合。衡量算法合理性的两个指标是运行时间和占用资源（比如内存）。 分析估计算法性能一般来说是一个理论问题，因此需要有一套正式的系统理论，这个理论基础就是数学。 数学基础定义算法分析用到以下4中定义。 1、如果存在正常数c和$ n_0$使得当$ N \geq n_0 时T(N) \leq cf(N)，则记为T(N)=O(f(N)) 。$ 2、如果存在正常数c和$ n_0 $使得当$ N \geq n_0 时T(N) \geq cg(N)，则记为T(N) = Ω(g(N))。$ 3、$T(N)= \Theta (h(N))当且仅当T(N)=O(h(N))且T(N)=Ω(h(N))。$ 4、$ 如果T(N)=O(p(N))且T(N) \neq \Theta (p(N))，则T(N) = o(p(N))。$ 通常在一些点上一个函数的值大于另外一个函数的值，比较这些点的大小往往是没有意义的，在算法分析中我们通常是要比较两个函数的增长趋势，即相对增长率。 从不等式的角度来看，定义1的含义为$T(N)$的相对增长率小于或等于$f(N)$，及$T(N)以不大于f(N)的趋势增长，因此f(N)是T(N)的一个$上界。 定义2含义为$T(N)以大于或等于g(N)的增长率增长，g(N)为T(N)的一个$下界。 定义3表示两个函数的增脏率相同。 定义4与定义1的区别是定义1包含增长率相同的可能，定义1的表方法称着大O记法，定义4的表示方法称为小o记法。 几个重要的法则法则1$ 如果T_1(N)=O(f(N))且T_2(N)=O(g(N))，那么$ $ T_1(N) + T_2(N)=max(O(f(N),O(g(N)))$ $ T_1(N) T_2(N)=O(f(N) g(N))$ 法则2$如果T(N)是一个k次多项式，则T(N)=\Theta(N^k)$ 法则3$对任意常数k,log^k N = O(N)$ 注意 在大O表示发中，忽略常数和低阶项，比如$T(N) = O(2N^2)$和$T(N)=O(N^2 + N)$都应该表示为$T(N)=O(N^2)$ 可以通过计算极限$\lim_{n-&gt;\infty}{f(N)/g(N)}$来确定两个函数$f(N)和g(N)$的增长率。如果极限为0，则$f(N)=o(g(N))$;如果为不等于0的常数则$f(N)=\Theta(g(N))$;如果极限是$\infty$，则$g(N)=o(f(N))$;如果极限摆动，则二者无关(算法分析中不会出现这种情况)。]]></content>
      <categories>
        <category>算法/数据结构</category>
        <category>理论</category>
      </categories>
      <tags>
        <tag>算法分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学证明方法与递归]]></title>
    <url>%2F20170609%2Fd00315b3.html</url>
    <content type="text"><![CDATA[证明数据结构分析中的结论经常用到两种方法,归纳法和反证法，这两种方法比较直观简单，只有在不得已的情况下才使用高大上的高等数学的证明方法。证明一个定理不成立最好的方法是反证法。 归纳法 归纳法证明的两个关键步骤： 基准情形，归纳假设 证明基准情形归纳法证明第一步是证明基准情形，即对确定的某个小范围（通常是退化的）值的正确性，这一步通常是最简单直接的。 归纳假设接下来是进行归纳假设，一般来说，这意味着假设定理对直到某个有限的数k的所有情况都成立，然后以此作为假设前提，证明定理对下一个值（通常是k+1）也成立，至此证明完成。 下面通过归纳法证明下面的定理。 斐波那契数列:$ F_0 = 1,F_1 = 1,F_2 = 2,F_3 = 3,F_4 = 5,…,Fi = F{i-1} + F_{i-2} $, 对于$ i \geq 1 满足 {F_i &lt; ({ 5 \over 3})^i} $ 证明: 首先，证明基准情形，对于$ F_1 = 1 &lt; {5 \over 3},F2 = 2 &lt; {25 \over 9 }成立。$ 现假设对于$ i = 1,2,…,k $欲证定理成立，在此基础上如果我们能证明$ F{k+1} &lt; ({5 \over 3})^{k+1} $成立，则定理成立。根据定义我们有： $ F_{k+1} = Fk + F{k-1} $ $ &lt; ({5 \over 3})^k + ({5 \over 3})^{k-1} $ $ &lt; ({3 \over 5})({5 \over 3})^{k+1} + ({3\over5})^2({5 \over 3})^{k+1} $ $ &lt; ({24 \over 25})({5 \over 3})^{k+1} $ $ &lt; ({5 \over 3})^{k+1} $ 以此定理成立。 如果 $ N \geq 1,则\sum_{i=1}^N i^2 = { N(N+1)(2N+1) \over 6 } $ 证明 当N=1时定理成立,现假设命题对 $ 1\leq k \leq N $ 成立,现证明对于N+1也成立 $ \sum{i=1}^{N+1} i^2 = \sum{i=1}^N i^2 + (N+1)^2 $ $ ={N(N+1)(2N+1) \over 6} + (N+1)^2 $ $ =(N+1)[{N(2N+1) \over 6} + (N+1)] $ $ =(N+1){(2N^2 + 7N + 6) \over 6} $ $ ={(N+1)[(N+1)+2][2(N+1)+1] \over 6} $ 于是N+1时也成立,命题得证。 反证法 费马猜想（费马素数），对于$ n \in N(自然数)，F_n = 2^{2^n} + 1 $是素数 这是费马老先生当时随便胡写在书页留白处的，并且说自己已经有证明方法了，可以这里写不下，我擦，据说好几十年没人证明出来，也是当时的计算能力有限，实际上当n=0,1,2,3,4时，$ F_n $分别是 3,5,17,257,65537都是素数，但是ｎ＝４时已经非常大了,但是当ｎ＝５时，$ F_n=614×6700417 $ ,这就是反证法 证明存在无穷多个素数 证明： 为了证明命题成立，我们先假设不成立，于是存在某个最大的素数$ P_k ,令P_1,P_2,..,P_k $是依序排列的所有素数，$ 令N = P_1P_2P_3…P_k + 1,显然N是比P_k $大的数， 根据假设N不是素数,可是$ P_1,P2,…,P_k $都不能整除N,因为整除的结果总有余数１，这就产生了 矛盾，因此假设不成立，因此原命题成立。]]></content>
      <categories>
        <category>算法/数据结构</category>
        <category>理论</category>
      </categories>
      <tags>
        <tag>证明方法</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学基础知识]]></title>
    <url>%2F20170607%2Fbacfe825.html</url>
    <content type="text"><![CDATA[算法分析的基础是数学，但是只从走出校门，就很少再接触这些东西，基本上都还给老师了，最近重读算法分析这本书，好多公式又冒出来了，为了以后再接触方便，这里特意记录下来。 指数$$ X^AX^B=X^{A+B} $$$$ { X^A \over X^B } = X^{A-B} $$$$ (X^A)^B = X^{AB} $$$$ X^N + X^N = 2X^N \neq X^{2N} $$$$ 2^N + 2^N = 2^{N+1} $$ 对数在计算机科学中，除非又特殊说明，所有对数都是以2为底。 对数定义 $ X^A = B ，当且仅当 \log_XB = A $ 根据定义可以推理出几个定理。 定理1$ \log_AB = { \log_CB \over \log_CA}; C &gt; 0 $ 定理2$ logAB = logA + logB $ 一些有用的公式$$ log{A \over B} = logA - logB $$$$ log(A^B) = BlogA $$$$ logX &lt; X (对所有X&gt;0成立) $$$$ log1 = 0,log2 = 1,log1024=10, log1048576=20 $$ 级数$$ \sum_{i=0}^N 2^i = 2^{N+1} - 1 $$ $$ \sum_{i=0}^N A^i = { A^{N+1} - 1 \over A - 1} $$ $$ \sum_{i=0}^N A^i \leq {1 \over 1 - A}; (0 &lt; A &lt; 1) $$ $$ \sum_{i=0}^\infty = {1 \over 1 - A} ;(0 &lt; A &lt; 1) $$ $$ \sum_{i=1}^N = { N(N + 1) \over 2 } \approx {N^2 \over 2} $$ $$ \sum_{i=1}^N i^2 = {N(N + 1)(2N + 1) \over 6 } \approx {N^3 \over 3} $$ $$ \sum_{i=1}^N i^k \approx { N^{k+1} \over | k + 1 |};k \neq -1 $$ 欧拉常数上面最后一个公式,当k=-1时不成立，此时我们需要另外的一个公式，这个公式在计算机科学中使用要远比在其它学科中使用得多。 $$ \sum_{i=1}^N { 1 \over i } = H_N \approx \log_e N,H_N称为调和数 $$ 式中误差γ趋近于0.57721566，这个值称为欧拉常数 两个代数运算公式$$ \sum_{i=1}^N f(N) = Nf(N) $$ $ \sum_{i=n_0}^N f(i) = A $ $ \sum_{i=1}^N f(i) = B $ $ \sum_{i=1}^{n_0 - 1}f(i) = C,则 A = B - C $ 模运算 如果A - B能够被N整除，那么A与B模N同余（congruent），记为： $ A \equiv B(mod N) $ 推论 若 $ A \equiv B(mod N) ，则 A + C \equiv B + C(mod N) $若 $ A \equiv B(mod N) ，则 AD \equiv BD(mod N) $]]></content>
      <categories>
        <category>算法/数据结构</category>
        <category>理论</category>
      </categories>
      <tags>
        <tag>数学基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UITabBar的基本用法]]></title>
    <url>%2F20170606%2F550b57b7.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[集合类型之0-概述]]></title>
    <url>%2F20170605%2F87569439.html</url>
    <content type="text"><![CDATA[集合类型所有编程语言中，元素集合都是最重要的数据类型，Swift提供三种集合类型存储集合数据：Arrays(数组)、Sets(集合)、Dictionaries(字典)。 Arrays: 有序数据集Sets: 无序不重复数据集Dictionaries: 无序键值对 注意：1、三种中集合都被实现为泛型集合2、三种集合都是值类型3、集合的可变性有声明关键字let、var决定4、在不需要改变集合的时候，尽量以let声明成常量]]></content>
      <categories>
        <category>移动开发</category>
        <category>iOS/swift</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[集合类型之3-字典]]></title>
    <url>%2F20170605%2Fbcf0b2d0.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[集合类型之2-集合]]></title>
    <url>%2F20170605%2Fd030d951.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[集合类型之1-数组]]></title>
    <url>%2F20170605%2Fb9db1057.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[为编译安装的nginx和php-fpm定制服务启动脚本]]></title>
    <url>%2F20151129%2F8d0d65c4.html</url>
    <content type="text"><![CDATA[源码编译安装的nginx和php-fpm没有centos自带的服务那样可以通过start|stop|restart等管理服务，只能自己定制了。 nginx启动脚本/etc/init.d/nginx123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#!/bin/bash## Startup script for Nginx - this script starts and stops the nginx daemon## chkconfig: - 85 15# description: Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server# processname: nginx# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] &amp;&amp; exit 0nginx="/alidata/server/nginx/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/alidata/server/nginx/conf/nginx.conf"[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginxlockfile=/var/lock/subsys/nginxstart() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 echo -n $"Starting $prog: " daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $"Stopping $prog: " killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop sleep 1 start&#125;reload() &#123; configtest || return $? echo -n $"Reloading $prog: " killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case "$1" in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;" exit 2esac 保存后赋予执行权限，加入开机启动 12sudo chmod +x /etc/init.d/nginxsudo /sbin/chkconfig nginx on PHP-FPM启动脚本/etc/init.d/php-fpm12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667 #!/bin/bash## Startup script for the PHP-FPM server.## chkconfig: 345 85 15# description: PHP is an HTML-embedded scripting language# processname: php-fpm# config: /usr/local/php/etc/php.ini# Source function library.. /etc/rc.d/init.d/functionsPHP_PATH=/alidata/serverDESC="php-fpm daemon"NAME=php-fpm# php-fpm路径DAEMON=$PHP_PATH/php/sbin/$NAME# 配置文件路径CONFIGFILE=$PHP_PATH/php/etc/php-fpm.conf# PID文件路径(在php-fpm.conf设置)PIDFILE=$PHP_PATH/php/var/run/$NAME.pidSCRIPTNAME=/etc/init.d/$NAME# Gracefully exit if the package has been removed.test -x $DAEMON || exit 0rh_start() &#123; $DAEMON -y $CONFIGFILE || echo -n " already running"&#125;rh_stop() &#123; kill -QUIT `cat $PIDFILE` || echo -n " not running"&#125;rh_reload() &#123; kill -HUP `cat $PIDFILE` || echo -n " can't reload"&#125;case "$1" in start) echo -n "Starting $DESC: $NAME" rh_start echo "." ;; stop) echo -n "Stopping $DESC: $NAME" rh_stop echo "." ;; reload) echo -n "Reloading $DESC configuration..." rh_reload echo "reloaded." ;; restart) echo -n "Restarting $DESC: $NAME" rh_stop sleep 1 rh_start echo "." ;; *) echo "Usage: $SCRIPTNAME &#123;start|stop|restart|reload&#125;" &gt;&amp;2 exit 3 ;;esacexit 0 同样赋予执行权限和设置开机启动： 12sudo chmod +x /etc/init.d/php-fpmsudo /sbin/chkconfig php-fpm on]]></content>
      <categories>
        <category>运维</category>
        <category>LA/NMP服务</category>
      </categories>
      <tags>
        <tag>启动脚本</tag>
        <tag>nginx</tag>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos6.5安装Memcached和php memcached扩展]]></title>
    <url>%2F20151129%2F61bbb9b8.html</url>
    <content type="text"><![CDATA[安装memcached服务$ yum -y install memcached 把memcached加入开机启动 $ chkconfig memcached on 这个比较简单，yum同时安装依赖的libevent，安装后只要执行memcached -h有输出即安装成功,memcached的默认启动参数可以在/etc/sysconfig/memcached 修改。 安装memcached扩展依赖的libmemcached12345$ wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz$ tar zxvf libmemcached-1.0.18.tar.gz $ cd libmemcached-1.0.18$ ./configure -prefix=/usr/local/libmemcached -with-memcached$ make &amp;&amp; make install 安装php-devel如果在你php的bin目录下有phpize这个东东这步可以省略，phpize主要用来编译php外挂扩展 $ yum -y install php-devel 安装igbinary扩展123456$ wget http://pecl.php.net/get/igbinary-1.2.1.tgz$ tar zxvf igbinary-1.2.1.tgz$ cd igbinary-1.2.1$ /alidata/server/php/bin/phpize$ ./configure --with-php-config=/alidata/server/php/bin/php-config$ make &amp;&amp; make install 然后在在php.ini中增加extension=igbinary.so 安装memcached扩展123456$ wget http://pecl.php.net/get/memcached-2.2.0.tgz$ tar zxvf memcached-2.2.0.tgz$ cd memcached-2.2.0$ /alidata/server/php/bin/phpize$ ./configure -enable-memcached -enable-memcached-igbinary -enable-memcached-json -with-php-config=/alidata/server/php/bin/php-config -with-zlib-dir -with-libmemcached-dir=/usr/local/libmemcached -prefix=/usr/local/phpmemcached --disable-memcached-sasl$ make &amp;&amp; make install 最后编辑php.ini，加入memcached扩展extension=memcached.so 正常情况安装就成功了。]]></content>
      <tags>
        <tag>php扩展</tag>
        <tag>memcached</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查询linux版本方法]]></title>
    <url>%2F20151129%2F1addf0dc.html</url>
    <content type="text"><![CDATA[1、查看/etc/redhat-release $ cat /etc/redhat-release 2、查看rpm包版本 $ rpm -q centos-release 如果是redhat则执行rpm -q redhat-release 3、所有版本通用的lsb_release 1234567#lsb_release -aLSB Version: :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarchDistributor ID: CentOSDescription: CentOS release 6.5 (Final)Release: 6.5Codename: Final 4、使用uname-a]]></content>
      <categories>
        <category>运维</category>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>发型版本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让nginx支持path_info]]></title>
    <url>%2F20151128%2F8e316de2.html</url>
    <content type="text"><![CDATA[nginx默认是不支持path_info模式的，也就是说不支持index.php/*这样的url，因此像Thinkphp中URL model为2的那种路径方式nginx不支持。 只要修改虚拟主机的下面三个地方即可： 12345678910location ~ .php &#123; #删除.php后的$ fastcgi_pass soopj_phpfcgi; fastcgi_index default.php; fastcgi_split_path_info ^((?U).+.php)(/?.+)$; #增加这句 fastcgi_param PATH_INFO $fastcgi_path_info; #增加这句 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;]]></content>
      <categories>
        <category>运维</category>
        <category>LA/NMP服务</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个 git hook自动部署脚本]]></title>
    <url>%2F20151128%2F56cf4d4.html</url>
    <content type="text"><![CDATA[http://www.ihorve.com/?p123456789101112131415161718192021222324252627282930313233343536373839#!/bin/sh## git autodeploy script when it matches string "[deploy]"## Usage:# 1. put this into the post-receive hook file itself below# 2. `chmod +x post-receive`# 3. Done!# Check the remote git repository whether it is bareIS_BARE=$(git rev-parse --is-bare-repository)if [ -z "$IS_BARE" ]; then echo &gt;&amp;2 "fatal:post-receive:IS_NOT_BARE" exit 1fi# Get the latest commit subjectSUBJECT=$(git log -1 --pretty=format:"%s")# Deploy the HEAD source to publishIS_PULL=$(echo "$SUBJECT" | grep "\[deploy\]")if [ -z "$IS_PULL" ];then echo &gt;&amp;2 "tips:post-receive:IS_NOT_PULL" exit 1fi# Check the deploy dir whether is existsDEPLOY_DIR=/home/wwwif [ ! -d $DEPLOY_DIR ]; then echo &gt;&amp;2 "fatal:post-receive:DEPLOY_DIR_NOT_EXISTS:\"$DEPLOY_DIR\"" exit 1fi# Check the deploy dir whether it is git repository#IS_GIT=$(git rev-parse --git-dir 2&gt;/dev/null)#if [ -z "$IS_GIT" ] ;then# echo &gt;&amp;2 "fatal:post-receive:IS_NOT_GIT"# exit 1#fi# Goto the deploy dir and pull the latest sourcescd $DEPLOY_DIR# env -i git reset --hardenv -i git pull]]></content>
      <categories>
        <category>工具/版本管理</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS安装samba服务]]></title>
    <url>%2F20151128%2F294fe70.html</url>
    <content type="text"><![CDATA[检查是否有安装samba服务： $ rpm -qa | grep samba 如果没安装则yum安装 $ yum -y install samba samba-client samba-common 默认的安装目录是/etc/samba，配置文件为smb.conf,先备份下smb文件$ cd /etc/samba$ cp smb.conf smb.conf.bak 然后编辑smb.conf加入以下内容： 123456[remote_dev] path = /alidata/nginx_www/wx.soopj.com public =no writable = yes write list = @www valid users = @www @www是客户端登录所需要的用户，设置nginx的用户密码： $ smbpasswd -a www 为了避免在启动Samba时出现以下警告信息：rlimit_max: increasing rlimit_max (1024) tominimum Windows limit (16384)，配置内核参数 12345$ ulimit -n 16384$ vi /etc/security/limits.conf#在最后加入以下内容* - nofile 16384 然后运行testparm检测配置文件。 然后启动服务，关闭防火墙： 123$ service smb start$ service nmb start$ service iptables stop centos7后启动服务由systemctl管理，防火墙换成firewalld，因此命令稍有不同。然后客户端即可测试。]]></content>
      <categories>
        <category>运维</category>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>samba</tag>
      </tags>
  </entry>
</search>