[{"title":"让nginx支持path_info","date":"2015-11-28T03:21:44.000Z","path":"2015/11/28/让nginx支持path-info/","text":"nginx默认是不支持path_info模式的，也就是说不支持index.php/*这样的url，因此像Thinkphp中URL model为2的那种路径方式nginx不支持。 只要修改虚拟主机的下面三个地方即可： 12345678910location ~ .php &#123; #删除.php后的$ fastcgi_pass soopj_phpfcgi; fastcgi_index default.php; fastcgi_split_path_info ^((?U).+.php)(/?.+)$; #增加这句 fastcgi_param PATH_INFO $fastcgi_path_info; #增加这句 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;","tags":[{"name":"nginx","slug":"nginx","permalink":"http://xuh.io/tags/nginx/"}]},{"title":"CentOS安装samba服务","date":"2015-11-28T03:21:44.000Z","path":"2015/11/28/CentOS安装samba服务/","text":"检查是否有安装samba服务： $ rpm -qa | grep samba 如果没安装则yum安装 $ yum -y install samba samba-client samba-common 默认的安装目录是/etc/samba，配置文件为smb.conf,先备份下smb文件$ cd /etc/samba$ cp smb.conf smb.conf.bak 然后编辑smb.conf加入以下内容： 123456[remote_dev] path = /alidata/nginx_www/wx.soopj.com public =no writable = yes write list = @www valid users = @www @www是客户端登录所需要的用户，设置nginx的用户密码： $ smbpasswd -a www 为了避免在启动Samba时出现以下警告信息：rlimit_max: increasing rlimit_max (1024) tominimum Windows limit (16384)，配置内核参数 12345$ ulimit -n 16384$ vi /etc/security/limits.conf#在最后加入以下内容* - nofile 16384 然后运行testparm检测配置文件。 然后启动服务，关闭防火墙： 123$ service smb start$ service nmb start$ service iptables stop centos7后启动服务由systemctl管理，防火墙换成firewalld，因此命令稍有不同。然后客户端即可测试。","tags":[{"name":"samba","slug":"samba","permalink":"http://xuh.io/tags/samba/"}]},{"title":"一个 git hook自动部署脚本","date":"2015-11-28T03:21:44.000Z","path":"2015/11/28/一个-git-hook自动部署脚本/","text":"http://www.ihorve.com/?p=234123456789101112131415161718192021222324252627282930313233343536373839#!/bin/sh## git autodeploy script when it matches string \"[deploy]\"## Usage:# 1. put this into the post-receive hook file itself below# 2. `chmod +x post-receive`# 3. Done!# Check the remote git repository whether it is bareIS_BARE=$(git rev-parse --is-bare-repository)if [ -z \"$IS_BARE\" ]; then echo &gt;&amp;2 \"fatal:post-receive:IS_NOT_BARE\" exit 1fi# Get the latest commit subjectSUBJECT=$(git log -1 --pretty=format:\"%s\")# Deploy the HEAD source to publishIS_PULL=$(echo \"$SUBJECT\" | grep \"\\[deploy\\]\")if [ -z \"$IS_PULL\" ];then echo &gt;&amp;2 \"tips:post-receive:IS_NOT_PULL\" exit 1fi# Check the deploy dir whether is existsDEPLOY_DIR=/home/wwwif [ ! -d $DEPLOY_DIR ]; then echo &gt;&amp;2 \"fatal:post-receive:DEPLOY_DIR_NOT_EXISTS:\\\"$DEPLOY_DIR\\\"\" exit 1fi# Check the deploy dir whether it is git repository#IS_GIT=$(git rev-parse --git-dir 2&gt;/dev/null)#if [ -z \"$IS_GIT\" ] ;then# echo &gt;&amp;2 \"fatal:post-receive:IS_NOT_GIT\"# exit 1#fi# Goto the deploy dir and pull the latest sourcescd $DEPLOY_DIR# env -i git reset --hardenv -i git pull","tags":[{"name":"git","slug":"git","permalink":"http://xuh.io/tags/git/"},{"name":"webhook","slug":"webhook","permalink":"http://xuh.io/tags/webhook/"}]}]